<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:media="http://search.yahoo.com/mrss/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     version="2.0">
  <channel>
    <title>The Broken Link</title>
    <description></description>
    <link>https://thebroken.link</link>
    <language>en</language>
    <image>
      <url>https://thebroken.link/assets/favicon/android-chrome-512x512.png</url>
      <title>The Broken Link</title>
      <link>https://thebroken.link</link>
    </image>
    <lastBuildDate>Sun, 27 Dec 2020 07:13:58 +0000</lastBuildDate>
    <atom:link href="https://thebroken.link/rss.xml" rel="self" type="application/rss+xml"/>
        <item>
          <title>My Worst Bug</title>
          <description>Debugging C/C++ can sometimes be a nightmare.</description>
          <guid>https://thebroken.link/my-worst-bug/</guid>
          <dc:creator>Alex de Sousa</dc:creator>
          <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
          <link>https://thebroken.link/my-worst-bug/</link>
          <content:encoded>
            <![CDATA[<!--kg-card-begin: markdown--><p>Some bugs pull you to the abyss and leave you there. They&#39;re the Balrog to our Gandalf. Once you beat them though, you&#39;re wiser and more powerful!</p>

<p><img src="https://media.giphy.com/media/rBblrZDuvOaJi/giphy.gif" alt="Gandalf falling!"></p>

<p>I was building a small plugin in C++ for an MT4 Server (ForEx trading server). The output of the project was a Windows DLL. Using the server&#39;s protocol, I managed to get JSON strings and parse them with <a href="https://rapidjson.org/">RapidJSON</a>. Everything ran smoothly in my virtual machine and in some development servers. Even Valgrind couldn&#39;t find memory leaks. I thought the plugin was ready for production...</p>

<p><strong>Oh boy was I so wrong!</strong></p>

<blockquote>
<p><strong>Note</strong>: RapidJSON is an amazing library and if I need to parse JSON in C/C++ again, I would use it without hesitation.</p>
</blockquote>

<p><img src="https://media.giphy.com/media/EimNpKJpihLY4/giphy.gif" alt="Fail!"></p>

<h2 id="debugging-the-problem">Debugging The Problem</h2>

<p>Once I deployed the plugin, everything seemed fine... until the next day! A nasty segmentation fault killed the server. The plugin made us loose some money and I had to roll back the deploy.</p>

<p>After several days of testing, I realized the production server always died with the same set of data. I was able to pinpoint the error to RapidJSON. Something weird was happening when the memory was allocated, but none of the tools I was using to debug this were reporting any problems.</p>

<p>I was desperate, so I compiled the DLL with debug symbols and then I de-compiled it using <a href="http://www.ollydbg.de/">OllyDBG</a>.</p>

<p>I started reading the DLL assembly code ... <strong>for a week and a half</strong>! Reading assembly was horrible. I considered switching careers. But then I got to the instruction that failed! Eureka! I couldn&#39;t believe it! It felt good to finally understand the bug!</p>

<p><img src="https://media.giphy.com/media/WR2W4OIee3YBQbIbID/giphy.gif" alt="Eureka!"></p>

<h2 id="the-bug">The Bug!</h2>

<p>The problem was that RapidJSON&#39;s custom allocator:</p>

<ul>
<li>Compressed the data in memory.</li>
<li>Allocated only what it needed.</li>
</ul>

<p>The production machine architecture:</p>

<ul>
<li>Allocated the memory RapidJSON asked for.</li>
<li>Ignored the way RapidJSON wanted the data to be structured.</li>
</ul>

<p>It&#39;s easier to see with an image:</p>

<p>
  <figure class="flex flex-col items-center w-full h-auto mx-auto">
    <img src="/my-worst-bug/memory_allocation.png" alt="RapidJSON Custom Allocation Vs. What The Machine Actually Did" />
    <figcaption class="text-center">
      <p>RapidJSON Custom Allocation Vs. What The Machine Actually Did</p>

    </figcaption>
  </figure>
</p>

<p>If RapidJSON needed to store an integer, a string and a boolean value, then it could fail randomly depending on the length of the string. e.g. given the integer <code>42</code> and the boolean <code>true</code>:</p>

<ul>
<li>For the string <code>Hey</code>, it would succeed:</li>
</ul>

<p>
  <figure class="flex flex-col items-center w-full h-auto mx-auto">
    <img src="/my-worst-bug/memory_allocation_success.png" alt="Memory allocation success." />
    <figcaption class="text-center">
      <p>Memory allocation success.</p>

    </figcaption>
  </figure>
</p>

<ul>
<li>For the string <code>Hi</code>, it would fail:</li>
</ul>

<p>
  <figure class="flex flex-col items-center w-full h-auto mx-auto">
    <img src="/my-worst-bug/memory_allocation_fail.png" alt="Memory allocation fail." />
    <figcaption class="text-center">
      <p>Memory allocation fail.</p>

    </figcaption>
  </figure>
</p>

<p>A debugging nightmare!</p>

<h2 id="the-solution">The Solution</h2>

<p>I just made RapidJSON use the machine&#39;s allocator instead of the custom one. Spent two weeks debugging something and changed just a single word in the code!</p>

<p><img src="https://media.giphy.com/media/10PDlC02A1L5Cw/giphy.gif" alt="I&#39;m an idiot!"></p>

<h2 id="conclusion">Conclusion</h2>

<p>Now I avoid C/C++ at all costs!</p>

<p><img src="https://media.giphy.com/media/3o7TKCEuECLAqDYEY8/giphy.gif" alt="Nightmare!"></p>

<p>I hope whatever bug you&#39;re dealing with at the moment gets solved soon!</p>
<!--kg-card-end: markdown-->]]>
          </content:encoded>
        </item>
        <item>
          <title>My Road to 8 Week Streak</title>
          <description>Writing is hard. Writing requires practice.</description>
          <guid>https://thebroken.link/my-road-to-8-week-streak/</guid>
          <dc:creator>Alex de Sousa</dc:creator>
          <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
          <link>https://thebroken.link/my-road-to-8-week-streak/</link>
          <content:encoded>
            <![CDATA[<!--kg-card-begin: markdown--><p>9 weeks ago, I challenged myself to consistently write an article every week for at least 8 weeks. Today, I can say I did it. It was hard. Not the hardest thing I&#39;ve done, but hard nonetheless.</p>

<p>It wasn&#39;t just about writing something and get done with it for the week. The internet is already filled with shallow useless content. I didn&#39;t need to contribute to that. I wanted to write good content. Enjoyable and memorable content. Content that made me proud.</p>

<p>Writing is hard. A blank page is intimidating. Hitting the <em>publish</em> button and exposing your thoughts to the masses is scary. Quitting is easy, but unforgivable.</p>

<p>Nonetheless, I wrote.</p>

<p><img src="https://media.giphy.com/media/R6xi8dXsRhIjK/giphy.gif" alt="Me writing"></p>

<h2 id="good-content">Good Content</h2>

<p>Beating the challenge wasn&#39;t the goal. The challenge kept my eyes on the goal. The goal was to promote my personal brand and my open source projects. I chose <em>content marketing</em> as my tool to reach the goal.</p>

<p>Everything I know about content marketing I learnt from <a href="https://app.growthmentor.com/marta-olszewska">my girlfriend</a>. I&#39;m not a marketing expert, but rule number one of content marketing is: <em>write good content</em>. The vaguest rule ever. So, what&#39;s good content?</p>

<h3 id="know-your-audience">Know Your Audience</h3>

<p>It&#39;s nice when someone shares your content. You reached them. Your content was valuable enough for them. They are your <em>target audience</em>.</p>

<p>I love Elixir. I feel comfortable sharing my knowledge about it. Most of my projects are written in Elixir. My target audience was anybody interested in Elixir. So... I mostly wrote about Elixir.</p>

<p><img src="https://media.giphy.com/media/3oD3YLLQBxZbBBYSWc/giphy.gif" alt="Your audience"></p>

<h3 id="shareable-content">Shareable Content</h3>

<p>Writing for your target audience is not enough. Your content needs to be shareable. And the most important thing: it needs to be shareable by the right people.</p>

<p>The right people are the experts in the area you chose. They have read a gazillion times about list comprehensions in Elixir. They haven&#39;t read about that time you implemented Prolog&#39;s backtracking using list comprehension in Elixir.</p>

<p>Write about the cool stuff you have done. The things you&#39;re proud of.</p>

<p><img src="https://media.giphy.com/media/PudZiAbQDUEik/giphy.gif" alt="Miyagi nodding"></p>

<h3 id="enjoyable-content">Enjoyable Content</h3>

<p>In the era of short attention span, you&#39;re worst enemy is sudden boredom. Use GIFs. Use images. Use graphics. Entertain while sharing knowledge.</p>

<p>Your article&#39;s content is competing with a sudden WhatsApp message with a meme or that Prime Video notification saying The Expanse new season is available now.</p>

<p><img src="https://media.giphy.com/media/SggILpMXO7Xt6/giphy.gif" alt="Oh, look a dogo"></p>

<h3 id="findable-content">Findable Content</h3>

<p>It doesn&#39;t matter you&#39;re the best technical writer in the world if nobody reads you. You need to distribute your content.</p>

<p>This greatly depends on the area you chose. In my case, Elixir&#39;s community is small and getting into the newsletters is not that hard as long as your content is valuable.</p>

<p>Don&#39;t wait for people to discover you. Reach out for them.</p>

<blockquote>
<p><strong>Important</strong>: Don&#39;t spam. Nobody likes spammers.</p>
</blockquote>

<p><img src="https://media.giphy.com/media/3o6ZsVObnL03crv4VG/giphy.gif" alt="Paper boy"></p>

<h2 id="measuring-success">Measuring Success</h2>

<p>Thinking you&#39;re writing good content is different than writing good content. I needed a way to measure my success. I tracked several metrics along the way:</p>

<ul>
<li>Number of DEV views.</li>
<li>Number of DEV reactions.</li>
<li>Number of DEV followers.</li>
<li>Number of Github stars.</li>
</ul>

<p>Additionally to those quantitative metrics, I also took into consideration whether the articles were published in a newsletter or not:</p>

<ul>
<li><a href="https://elixirweekly.net/">Elixir Weekly</a></li>
<li><a href="http://plataformatec.com.br/elixir-radar/">Elixir Radar</a></li>
</ul>

<p>I created a spreadsheet in Google Sheets and with <a href="https://gist.github.com/alexdesousa/a23552ed2995a865895f53a4fd844c6b">this script</a> I periodically gathered the data. This approach was inspired by/stolen from <a href="https://dev.to/pluralsight/pulling-your-dev-to-stats-into-a-google-sheet-56dh">this article</a>.</p>

<p>
  <figure class="flex flex-col items-center w-full h-auto mx-auto">
    <img src="/my-road-to-8-week-streak/spreadsheet.png" alt="My data" />
    <figcaption class="text-center">
      <p>Spreadsheet with my data</p>

    </figcaption>
  </figure>
</p>

<p>I wasn&#39;t that rigorous with Twitter metrics, but I still kept them in mind when writing a tweet sharing my next article:</p>

<ul>
<li>Number of Twitter likes.</li>
<li>Number of Twitter retweets.</li>
<li>Number of Twitter followers.</li>
</ul>

<p><img src="https://media.giphy.com/media/6ZnDM7tOjKTRe/giphy.gif" alt="Measuring"></p>

<h2 id="results">Results</h2>

<p>My articles were well received by the community. I got useful feedback that has improved both my projects and blog posts. I even got great pull requests to some of my projects and that makes me happy. People not only find my articles, but also my projects, useful!</p>

<p><img src="https://media.giphy.com/media/rdma0nDFZMR32/giphy.gif" alt="Happy pigglet"></p>

<p>The following is a performance summary for all blog posts and open source projects:</p>

<table><thead>
<tr>
<th style="text-align: left">Metric (Number of)</th>
<th style="text-align: right">Before</th>
<th style="text-align: right">Week 9</th>
<th style="text-align: right">Change</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: left">DEV views</td>
<td style="text-align: right">0</td>
<td style="text-align: right">3319</td>
<td style="text-align: right">+3319</td>
</tr>
<tr>
<td style="text-align: left">DEV reactions</td>
<td style="text-align: right">0</td>
<td style="text-align: right">125</td>
<td style="text-align: right">+125</td>
</tr>
<tr>
<td style="text-align: left">DEV followers</td>
<td style="text-align: right">0</td>
<td style="text-align: right">164</td>
<td style="text-align: right">+164</td>
</tr>
<tr>
<td style="text-align: left">Github stars</td>
<td style="text-align: right">49</td>
<td style="text-align: right">170</td>
<td style="text-align: right">+121</td>
</tr>
<tr>
<td style="text-align: left">Twitter followers</td>
<td style="text-align: right">2</td>
<td style="text-align: right">29</td>
<td style="text-align: right">+27</td>
</tr>
<tr>
<td style="text-align: left">Elixir Weekly publications</td>
<td style="text-align: right">0</td>
<td style="text-align: right">4</td>
<td style="text-align: right">+4</td>
</tr>
<tr>
<td style="text-align: left">Elixir Radar publications</td>
<td style="text-align: right">0</td>
<td style="text-align: right">1</td>
<td style="text-align: right">+1</td>
</tr>
</tbody></table>

<p><img src="https://media.giphy.com/media/RgfGmnVvt8Pfy/giphy.gif" alt="That&#39;s good"></p>

<h2 id="lessons">Lessons</h2>

<p>Consistently writing good content is hard. The following are some of the lessons learnt these past 8 weeks:</p>

<ul>
<li><strong>Choose a publishing day</strong>: My days were Thursdays. I needed to hit the
<em>publish</em> button no matter what. Pressure is good.</li>
<li><strong>Pick your article&#39;s topic one week before you publish it</strong>: Some articles require experimentation and research. Good content requires time. Don&#39;t rush it.</li>
<li><strong>Pick a <em>backup topic</em></strong>: If your main article is not ready for publishing, then publish a good article about the <em>backup topic</em>.</li>
<li><strong>Write in <em>beast mode</em></strong>: Write what&#39;s on your mind. Don&#39;t try to write a perfect article. Just write. Once your ideas are written, you can edit.</li>
<li><strong>Distribute your content</strong>: Once you publish the article, distribute it in every relevant channel you have at your disposal.</li>
</ul>

<p><img src="https://media.giphy.com/media/I5yH9Aeq0EGCA/giphy.gif" alt="Climbing"></p>

<h2 id="conclusion">Conclusion</h2>

<p>Writing is hard. Writing requires practice. The more you practice, the easier it gets. Just do it!</p>

<p><img src="https://media.giphy.com/media/qDPg6HNz2NfAk/giphy.gif" alt="Just do it!"></p>

<p>Happy writing!</p>

<p><em>Cover image by <a href="https://unsplash.com/@aaronburden">Aaron Burden</a></em></p>
<!--kg-card-end: markdown-->]]>
          </content:encoded>
        </item>
        <item>
          <title>AyeSQL: Writing Raw SQL in Elixir</title>
          <description>Sometimes good'ol SQL is better than any abstraction.</description>
          <guid>https://thebroken.link/ayesql-writing-raw-sql-in-elixir/</guid>
          <dc:creator>Alex de Sousa</dc:creator>
          <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
          <link>https://thebroken.link/ayesql-writing-raw-sql-in-elixir/</link>
          <content:encoded>
            <![CDATA[<!--kg-card-begin: markdown--><p>Most developers consider that writing raw SQL (Structured Query Language) is a bad practice. The main arguments against it are that Object Relational Mappers (ORMs):</p>

<ul>
<li>Abstract several SQL dialects.</li>
<li>Have a flat learning curve unlike SQL.</li>
<li>Optimize queries.</li>
</ul>

<p>ORMs allow you to abstract queries in an almost magical way:</p>
<div class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp"># INSERT INTO user (name, age)
#   VALUES ('Bob', 18)
#   ON CONFLICT(name)
#   DO UPDATE SET name = EXCLUDED.name
#   RETURNING name, age
</span><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="p">(</span><span class="s">"Bob"</span><span class="p">,</span> <span class="mi">18</span><span class="p">)</span>

<span class="cp"># UPDATE user
#   SET age = 17
#   WHERE name = 'Bob'
</span><span class="n">user</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">17</span>
</code></pre></div>
<p><img src="https://media.giphy.com/media/12NUbkX6p4xOO4/giphy.gif" alt="Magic!"></p>

<h2 id="before-we-start">Before we start</h2>

<p>The contents of this article are a mix between my work experience and the great insights <a href="https://www.goodreads.com/book/show/36555832-mastering-postgresql-in-application-development">Mastering PostgreSQL in Application Development</a> book provides.</p>

<p>The code for this article can be found <a href="https://github.com/alexdesousa/alexdesousa.github.io/tree/blog/examples/matrix">here</a> and it can be downloaded with the following command:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">git clone <span class="se">\</span>
  <span class="nt">--depth</span> 2 <span class="se">\</span>
  <span class="nt">-b</span> blog <span class="se">\</span>
  https://github.com/alexdesousa/alexdesousa.github.io.git examples <span class="o">&amp;&amp;</span> <span class="se">\</span>
<span class="nb">cd </span>examples <span class="o">&amp;&amp;</span> <span class="se">\</span>
git filter-branch <span class="se">\</span>
  <span class="nt">--prune-empty</span> <span class="se">\</span>
  <span class="nt">--subdirectory-filter</span> examples/f1 HEAD
</code></pre></div>
<h2 id="my-orm-abstracts-several-sql-dialects">&quot;My ORM abstracts several SQL dialects&quot;</h2>

<p>In my experience, I&#39;ve found that it&#39;s more likely for an application to be re-written in another language e.g. Ruby to Elixir than actually migrating the data from one database to another e.g. MySQL to PostgreSQL.</p>

<p>Additionally, running the database migrations in a different database is not a walk in the park either. Complex applications end up adding custom SQL to their migrations in order to optimize or automate certain processes: database extensions, indexes and triggers.</p>

<p>And then, the data needs to be migrated e.g. <code>pgloader</code> is an amazing tool that migrates data from MySQL, SQLite or MSSQL to PostgreSQL. However, sometimes these tools don&#39;t work correctly or they are nonexistent.</p>

<p><img src="https://media.giphy.com/media/26ybwvTX4DTkwst6U/giphy.gif" alt="At least you tried"></p>

<h2 id="my-orm-has-a-flat-learning-curve-unlike-sql">&quot;My ORM has a flat learning curve unlike SQL&quot;</h2>

<p>SQL is different. It&#39;s a functional language and most programmers are used to imperative languages. It&#39;s also hard to master.</p>

<p>Ironically, the queries are almost in natural language e.g. if we show the following sentences to someone who doesn&#39;t know SQL, probably they&#39;ll know they have the same objective:</p>

<ul>
<li><em>Get the <code>name</code> and <code>age</code> of every <code>client</code> older than or equal to <code>18</code></em>.</li>
<li><code>SELECT name, age FROM client WHERE age ≥ 18</code></li>
</ul>

<p>ORMs specifically work great for simple queries. However, when you need a more complex query, you end up doing certain workarounds to bypass the ORMs limitations:</p>

<ul>
<li>Writing raw SQL directly.</li>
<li>Querying the database several times (sometimes unknowingly) to retrieve the data we need and doing the computation in our language instead of the database.</li>
</ul>

<p>For now I&#39;ll focus on the second approach and I&#39;ll talk about the first one later. It&#39;s easier to see it with a small example:</p>

<p>Given the following subset of tables from the <a href="https://github.com/lerocha/chinook-database">Chinook database</a>:</p>

<p>
  <figure class="flex flex-col items-center w-full h-auto mx-auto">
    <img src="/ayesql-writing-raw-sql-in-elixir/music.png" alt="Chinook database subset" />
    <figcaption class="text-center">
      <p>Chinook database subset</p>

    </figcaption>
  </figure>
</p>

<p>We want to know the <em>duration of every album Pearl Jam has ever made</em> (or at least the ones listed in the database). In an OO language we would do something like:</p>
<div class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">Artist</span> <span class="n">artist</span> <span class="o">=</span> <span class="n">Artist</span><span class="p">.</span><span class="n">one</span><span class="p">(</span><span class="n">name</span><span class="o">:</span> <span class="s">"Pearl Jam"</span><span class="p">)</span>

<span class="k">for</span> <span class="n">album</span> <span class="n">in</span> <span class="n">Album</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">artistId</span><span class="o">:</span> <span class="n">artist</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
  <span class="n">ms</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">for</span> <span class="n">track</span> <span class="n">in</span> <span class="n">Track</span><span class="p">.</span><span class="n">all</span><span class="p">(</span><span class="n">albumId</span><span class="o">:</span> <span class="n">album</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
    <span class="n">ms</span> <span class="o">+=</span> <span class="n">track</span><span class="p">.</span><span class="n">milliseconds</span>

  <span class="n">print</span><span class="p">(</span><span class="s">"#{album.title} | #{format_time(ms)}"</span><span class="p">)</span>
</code></pre></div>
<p>For a developer who doesn&#39;t know SQL, this would seem like reasonable code. In reality, it&#39;s highly inefficient:</p>

<ol>
<li><p>We&#39;re requesting one artist by name:</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="nv">"Artist"</span> <span class="k">WHERE</span> <span class="nv">"Name"</span> <span class="o">=</span> <span class="s1">'Pearl Jam'</span>
</code></pre></div></li>
<li><p>Then requesting all albums by artist id:</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="nv">"Album"</span> <span class="k">WHERE</span> <span class="nv">"ArtistId"</span> <span class="o">=</span> <span class="n">artist</span><span class="p">.</span><span class="n">id</span>
</code></pre></div></li>
<li><p>For every album, we&#39;re requesting the tracks by album id:</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="nv">"Track"</span> <span class="k">WHERE</span> <span class="nv">"AlbumId"</span> <span class="o">=</span> <span class="n">album</span><span class="p">.</span><span class="n">id</span>
</code></pre></div></li>
</ol>

<p>This database contains 5 Pearl Jam albums, so we would be querying the database 7 times. The magic behind the ORM is deceiving us. In every round trip to the database, we need to consider two things:</p>

<ul>
<li>Time the query takes to execute.</li>
<li>Time the network transmits the data.</li>
</ul>

<p>Good ORMs introduce ways of dealing with this type of problem. However, knowing we need to use those tools in order to have good performance in our queries requires knowing SQL.</p>

<p>So, going back to the title of this section: Do ORMs really have a flat learning curve? Considering programmers need to know SQL to understand the tools ORMs offer and SQL is hard, then I guess they have not.</p>

<p><img src="https://media.giphy.com/media/1oJLpejP9jEvWQlZj4/giphy.gif" alt="Visible confusion"></p>

<p>The previous problem can be solved with one query:</p>

<blockquote>
<p><strong>Note:</strong> Chinook database has capitalized table and column names. That&#39;s why they need to be between double quotes.</p>
</blockquote>
<div class="highlight"><pre><code class="language-sql" data-lang="sql">    <span class="k">SELECT</span> <span class="nv">"Album"</span><span class="p">.</span><span class="nv">"Title"</span> <span class="k">AS</span> <span class="n">album</span><span class="p">,</span>
           <span class="k">SUM</span><span class="p">(</span><span class="nv">"Track"</span><span class="p">.</span><span class="nv">"Milliseconds"</span><span class="p">)</span> <span class="o">*</span> <span class="n">interval</span> <span class="s1">'1 ms'</span> <span class="k">AS</span> <span class="n">duration</span>
      <span class="k">FROM</span> <span class="nv">"Album"</span>
<span class="k">INNER</span> <span class="k">JOIN</span> <span class="nv">"Artist"</span> <span class="k">USING</span><span class="p">(</span><span class="nv">"ArtistId"</span><span class="p">)</span>
 <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="nv">"Track"</span> <span class="k">USING</span><span class="p">(</span><span class="nv">"AlbumId"</span><span class="p">)</span>
     <span class="k">WHERE</span> <span class="nv">"Artist"</span><span class="p">.</span><span class="nv">"Name"</span> <span class="o">=</span> <span class="s1">'Pearl Jam'</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">album</span>
  <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">album</span>
</code></pre></div>
<p>and our result would be already formatted:</p>
<div class="highlight"><pre><code class="language-" data-lang="">          album          |   duration
-------------------------+-------------
 Live On Two Legs [Live] | 01:11:18.954
 Pearl Jam               | 00:49:43.857
 Riot Act                | 00:54:16.468
 Ten                     | 00:53:25.871
 Vs.                     | 00:46:17.674
</code></pre></div>
<h2 id="my-orm-optimizes-queries">&quot;My ORM optimizes queries&quot;</h2>

<p>Good ORMs do optimize queries. Usually they optimize queries for the most common cases. However, if the problem we&#39;re solving is not covered by these optimizations, it can be a real head-scratcher.</p>

<p>In the end, we end up with a subpar solution or writing raw SQL to overcome the limitations.</p>

<p><img src="https://media.giphy.com/media/D1ETZoAPSt5EA/giphy.gif" alt="duct taping broken wall"></p>

<h2 id="language-mappers">Language Mappers</h2>

<p>There are alternatives to ORMs. In Elixir, we have <a href="https://github.com/elixir-ecto/ecto">Ecto</a>. It&#39;s not an ORM, but a language mapper. It gives you a Domain Specific Language (DSL) for dealing with SQL queries in Elixir e.g. again if we want to know the <em>duration of every album Pearl Jam has ever made</em> (or the 5 listed in this database), we would do the following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">query</span> <span class="o">=</span>
  <span class="n">from</span> <span class="n">al</span> <span class="ow">in</span> <span class="no">Album</span><span class="p">,</span>
    <span class="ss">inner_join:</span> <span class="n">ar</span> <span class="ow">in</span> <span class="no">Artist</span><span class="p">,</span> <span class="ss">on:</span> <span class="n">al</span><span class="o">.</span><span class="n">artistId</span> <span class="o">==</span> <span class="n">ar</span><span class="o">.</span><span class="n">artistId</span><span class="p">,</span>
    <span class="ss">left_join:</span> <span class="n">tr</span> <span class="ow">in</span> <span class="no">Track</span><span class="p">,</span> <span class="ss">on:</span> <span class="n">tr</span><span class="o">.</span><span class="n">albumId</span> <span class="o">==</span> <span class="n">ar</span><span class="o">.</span><span class="n">albumId</span><span class="p">,</span>
    <span class="ss">where:</span> <span class="n">ar</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="sd">"</span><span class="s2">Pearl Jam"</span>
    <span class="ss">group_by:</span> <span class="n">al</span><span class="o">.</span><span class="n">title</span>
    <span class="ss">order_by:</span> <span class="n">al</span><span class="o">.</span><span class="n">title</span>
    <span class="ss">select:</span> <span class="p">%{</span><span class="ss">album:</span> <span class="n">al</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="ss">duration:</span> <span class="n">sum</span><span class="p">(</span><span class="n">tr</span><span class="o">.</span><span class="n">milliseconds</span><span class="p">)}</span>

<span class="no">Repo</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</code></pre></div>
<p>Language mappers require developers to know SQL, but allows them to <em>almost</em> never leave the comfort of their language. That <em>&quot;almost&quot;</em> is important.</p>

<p><img src="https://media.giphy.com/media/RgfGmnVvt8Pfy/giphy.gif" alt="that&#39;s good"></p>

<p>Though not everything is sunshine and rainbows. Language mappers try to abstract several SQL dialects in an unified DSL. This means that not all the SQL of our database is going to be included in this DSL.</p>

<p>To overcome this limitation, Ecto introduces the concept of <em>fragments</em>. Fragments are pieces of custom SQL code that can be added to our queries e.g. given the following subset from <a href="https://ergast.com/mrd/db/">Ergast Developer API</a> database:</p>

<p>
  <figure class="flex flex-col items-center w-full h-auto mx-auto">
    <img src="/ayesql-writing-raw-sql-in-elixir/f1.png" alt="Ergast Developer API database" />
    <figcaption class="text-center">
      <p>Ergast Developer API database</p>

    </figcaption>
  </figure>
</p>

<p>Let&#39;s say we want to get the percentage of accidents per participant in F1 seasons between the years 1974 and 1990. In SQL, we would have the following:</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">WITH</span> <span class="n">accidents</span> <span class="k">AS</span>
<span class="p">(</span>
    <span class="k">SELECT</span> <span class="k">EXTRACT</span><span class="p">(</span><span class="k">year</span> <span class="k">from</span> <span class="n">races</span><span class="p">.</span><span class="n">date</span><span class="p">)</span> <span class="k">AS</span> <span class="n">season</span><span class="p">,</span>
           <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">participants</span><span class="p">,</span>
           <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">FILTER</span><span class="p">(</span><span class="k">WHERE</span> <span class="n">status</span> <span class="o">=</span> <span class="s1">'Accident'</span><span class="p">)</span> <span class="k">AS</span> <span class="n">accidents</span>
      <span class="k">FROM</span> <span class="n">f1db</span><span class="p">.</span><span class="n">results</span>
      <span class="k">JOIN</span> <span class="n">f1db</span><span class="p">.</span><span class="n">status</span> <span class="k">USING</span><span class="p">(</span><span class="n">statusid</span><span class="p">)</span>
      <span class="k">JOIN</span> <span class="n">f1db</span><span class="p">.</span><span class="n">races</span> <span class="k">USING</span><span class="p">(</span><span class="n">raceid</span><span class="p">)</span>
  <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">season</span>
<span class="p">)</span>
  <span class="k">SELECT</span> <span class="n">season</span><span class="p">,</span>
         <span class="n">ROUND</span><span class="p">(</span><span class="mi">100</span><span class="p">.</span><span class="mi">0</span> <span class="o">*</span> <span class="n">accidents</span> <span class="o">/</span> <span class="n">participants</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">percentage</span>
    <span class="k">FROM</span> <span class="n">accidents</span>
   <span class="k">WHERE</span> <span class="n">season</span> <span class="k">BETWEEN</span> <span class="mi">1974</span> <span class="k">AND</span> <span class="mi">1990</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">season</span>
</code></pre></div>
<p>Now, when translating this query to Ecto, we&#39;ll have to use fragments:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># NOTE: The schema definition is omitted.</span>

<span class="n">from</span> <span class="o">=</span> <span class="m">1974</span>
<span class="n">to</span> <span class="o">=</span> <span class="m">1990</span>

<span class="n">accidents</span> <span class="o">=</span>
  <span class="n">from</span> <span class="n">re</span> <span class="ow">in</span> <span class="no">Result</span><span class="p">,</span>
    <span class="ss">join:</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">assoc</span><span class="p">(</span><span class="n">re</span><span class="p">,</span> <span class="ss">:status</span><span class="p">),</span>
    <span class="ss">join:</span> <span class="n">ra</span> <span class="ow">in</span> <span class="n">assoc</span><span class="p">(</span><span class="n">re</span><span class="p">,</span> <span class="ss">:race</span><span class="p">),</span>
    <span class="ss">group_by:</span> <span class="n">fragment</span><span class="p">(</span><span class="sd">"</span><span class="s2">season"</span><span class="p">),</span>
    <span class="ss">select:</span> <span class="p">%{</span>
      <span class="ss">season:</span> <span class="n">fragment</span><span class="p">(</span><span class="sd">"</span><span class="s2">EXTRACT(year from ?)"</span><span class="p">,</span> <span class="n">ra</span><span class="o">.</span><span class="n">date</span><span class="p">),</span>
      <span class="ss">participants:</span> <span class="n">fragment</span><span class="p">(</span><span class="sd">"</span><span class="s2">COUNT(*)"</span><span class="p">),</span>
      <span class="ss">accidents:</span> <span class="n">fragment</span><span class="p">(</span><span class="sd">"</span><span class="s2">COUNT(*) FILTER(WHERE status = 'Accident')"</span><span class="p">)</span>
    <span class="p">}</span>

<span class="n">query</span> <span class="o">=</span>
  <span class="n">from</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">subquery</span><span class="p">(</span><span class="n">accidents</span><span class="p">),</span>
    <span class="ss">where:</span> <span class="n">fragment</span><span class="p">(</span><span class="sd">"</span><span class="s2">? BETWEEN ? AND ?"</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">season</span><span class="p">,</span> <span class="o">^</span><span class="n">from</span><span class="p">,</span> <span class="o">^</span><span class="n">to</span><span class="p">),</span>
    <span class="ss">select:</span> <span class="p">%{</span>
      <span class="ss">season:</span> <span class="n">a</span><span class="o">.</span><span class="n">season</span><span class="p">,</span>
      <span class="ss">percentage:</span> <span class="n">fragment</span><span class="p">(</span><span class="sd">"</span><span class="s2">ROUND(100.0 * ? / ?, 2)"</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">accidents</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">participants</span><span class="p">)</span>
    <span class="p">}</span>

<span class="no">F1</span><span class="o">.</span><span class="no">Repo</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</code></pre></div>
<p>The code above is hard to read, hard to write and error prone. Yet we don&#39;t have any performance improvements in our query. A maintenance nightmare.</p>

<p>We could re-write the previous Ecto query differently by encapsulating them in Elixir macros and then importing our custom DSL e.g:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">CustomDSL</span> <span class="k">do</span>
  <span class="kn">import</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Query</span>

  <span class="k">defmacro</span> <span class="n">year</span><span class="p">(</span><span class="n">date</span><span class="p">)</span> <span class="k">do</span>
    <span class="kn">quote</span> <span class="k">do</span>
      <span class="n">fragment</span><span class="p">(</span><span class="sd">"</span><span class="s2">EXTRACT(year from ?)"</span><span class="p">,</span> <span class="kn">unquote</span><span class="p">(</span><span class="n">date</span><span class="p">))</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="o">...</span>
<span class="k">end</span>
</code></pre></div>
<p>But again, we wouldn&#39;t get any improvements performance-wise. Just readability... in Ecto. It was perfectly readable in SQL.</p>

<p>The consequences are clear. Developers need knowledge of:</p>

<ul>
<li>The specific SQL dialect (in this case PostgreSQL dialect).</li>
<li>Ecto&#39;s API and its limitations.</li>
<li>Elixir&#39;s macros for fragment encapsulation.</li>
</ul>

<p>Additionally, now they need to maintain a new custom DSL API with its documentation. If we only have a few of this complex queries in our project, is it worthy?</p>

<p>What&#39;s worse, after the refactor, we could end up with a subpar solution or wasting our time entirely.</p>

<h2 id="raw-sql">Raw SQL</h2>

<p>So far we&#39;ve seen ORMs and language mappers are good for general problems we might encounter. However, some other problems are better left in raw SQL.</p>

<p>ORMs, language mappers and database adapters usually provide an API for running raw SQL. In Elixir, Ecto and <a href="https://github.com/elixir-ecto/postgrex">Postgrex</a> give us the function <code>query/2</code> e.g. in Ecto we would do the following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">query</span> <span class="o">=</span>
  <span class="sd">"""
  WITH accidents AS
  (
      SELECT EXTRACT(year from races.date) AS season,
             COUNT(*) AS participants,
             COUNT(*) FILTER(WHERE status = 'Accident') AS accidents
        FROM results
        JOIN status USING(statusid)
        JOIN races USING(raceid)
    GROUP BY season
  )
    SELECT season,
           ROUND(100.0 * accidents / participants, 2) AS percentage
      FROM accidents
     WHERE season BETWEEN $1 AND $2
  ORDER BY season
  """</span>

<span class="no">Ecto</span><span class="o">.</span><span class="no">Adapters</span><span class="o">.</span><span class="no">SQL</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="no">F1</span><span class="o">.</span><span class="no">Repo</span><span class="p">,</span> <span class="n">query</span><span class="p">,</span> <span class="p">[</span><span class="m">1974</span><span class="p">,</span> <span class="m">1990</span><span class="p">])</span>
</code></pre></div>
<p>There are some things I&#39;d like to point out from the previous code:</p>

<ul>
<li><code>$1</code> and <code>$2</code> are the query parameters: The numbers indicate the position in the parameter list. If we add status as a variable instead of the constant <code>&#39;Accidents&#39;</code>, we would need to update the other indexes.</li>
<li>The query is a string: usually editors wouldn&#39;t highlight the SQL syntax inside the string.</li>
<li>The <code>columns</code> and <code>rows</code> are separated in the result:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span>
    <span class="p">%</span><span class="no">Postgrex</span><span class="o">.</span><span class="no">Result</span><span class="p">{</span>
      <span class="ss">columns:</span> <span class="p">[</span><span class="sd">"</span><span class="s2">season"</span><span class="p">,</span> <span class="sd">"</span><span class="s2">percentage"</span><span class="p">],</span>
      <span class="ss">command:</span> <span class="ss">:select</span><span class="p">,</span>
      <span class="ss">connection_id:</span> <span class="m">206</span><span class="p">,</span>
      <span class="ss">messages:</span> <span class="p">[],</span>
      <span class="ss">num_rows:</span> <span class="m">17</span><span class="p">,</span>
      <span class="ss">rows:</span> <span class="p">[</span>
        <span class="p">[</span><span class="m">1974.0</span><span class="p">,</span> <span class="c1">#Decimal&lt;3.67&gt;],</span>
        <span class="p">[</span><span class="m">1975.0</span><span class="p">,</span> <span class="c1">#Decimal&lt;14.88&gt;],</span>
        <span class="p">[</span><span class="m">1976.0</span><span class="p">,</span> <span class="c1">#Decimal&lt;11.06&gt;],</span>
        <span class="p">[</span><span class="m">1977.0</span><span class="p">,</span> <span class="c1">#Decimal&lt;12.58&gt;],</span>
        <span class="p">[</span><span class="m">1978.0</span><span class="p">,</span> <span class="c1">#Decimal&lt;10.19&gt;],</span>
        <span class="o">...</span>
   <span class="p">}}</span>
</code></pre></div>
<p>The complexity it&#39;s still there.</p>

<h2 id="meet-ayesql">Meet AyeSQL</h2>

<p>Inspired by Clojure library <a href="https://github.com/krisajenkins/yesql">Yesql</a>, <a href="https://github.com/alexdesousa/ayesql">AyeSQL</a> tries to find a middle ground between raw SQL strings and SQL language mappers by:</p>

<ul>
<li>Keeping SQL in SQL files.</li>
<li>Generating Elixir functions for every query.</li>
<li>Working out of the box with PostgreSQL using Ecto or Postgrex.</li>
<li>Being extendable to support other databases and outputs.</li>
<li>Allowing some query composability.</li>
</ul>

<p>Defining the same query in AyeSQL, we would need the following:</p>

<ul>
<li>A file for defining our query in raw SQL:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="o">--</span> <span class="ss">file:</span> <span class="n">lib</span><span class="o">/</span><span class="n">f1</span><span class="o">/</span><span class="n">query</span><span class="o">/</span><span class="n">season</span><span class="o">.</span><span class="n">sql</span>

   <span class="o">--</span> <span class="ss">name:</span> <span class="n">get_accidents</span>
   <span class="o">--</span> <span class="ss">docs:</span> <span class="no">Gets</span> <span class="n">accidents</span> <span class="ow">in</span> <span class="n">a</span> <span class="n">season</span> <span class="n">range</span><span class="o">.</span>
   <span class="no">WITH</span> <span class="n">accidents</span> <span class="no">AS</span>
   <span class="p">(</span>
       <span class="no">SELECT</span> <span class="no">EXTRACT</span><span class="p">(</span><span class="n">year</span> <span class="n">from</span> <span class="n">races</span><span class="o">.</span><span class="n">date</span><span class="p">)</span> <span class="no">AS</span> <span class="n">season</span><span class="p">,</span>
              <span class="no">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="no">AS</span> <span class="n">participants</span><span class="p">,</span>
              <span class="no">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="no">FILTER</span><span class="p">(</span><span class="no">WHERE</span> <span class="n">status</span> <span class="o">=</span> <span class="s1">'Accident'</span><span class="p">)</span> <span class="no">AS</span> <span class="n">accidents</span>
         <span class="no">FROM</span> <span class="n">f1db</span><span class="o">.</span><span class="n">results</span> <span class="no">AS</span> <span class="n">results</span>
         <span class="no">JOIN</span> <span class="n">f1db</span><span class="o">.</span><span class="n">status</span> <span class="no">AS</span> <span class="n">status</span> <span class="no">USING</span><span class="p">(</span><span class="n">statusid</span><span class="p">)</span>
         <span class="no">JOIN</span> <span class="n">f1db</span><span class="o">.</span><span class="n">races</span> <span class="no">AS</span> <span class="n">races</span> <span class="no">USING</span><span class="p">(</span><span class="n">raceid</span><span class="p">)</span>
     <span class="no">GROUP</span> <span class="no">BY</span> <span class="n">season</span>
   <span class="p">)</span>
     <span class="no">SELECT</span> <span class="n">season</span><span class="p">,</span>
            <span class="no">ROUND</span><span class="p">(</span><span class="m">100.0</span> <span class="o">*</span> <span class="n">accidents</span> <span class="o">/</span> <span class="n">participants</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span> <span class="no">AS</span> <span class="n">percentage</span>
       <span class="no">FROM</span> <span class="n">accidents</span>
      <span class="no">WHERE</span> <span class="n">season</span> <span class="no">BETWEEN</span> <span class="ss">:from</span> <span class="no">AND</span> <span class="ss">:to</span>
   <span class="no">ORDER</span> <span class="no">BY</span> <span class="n">season</span>
</code></pre></div>
<ul>
<li>A file for declaring our queries as Elixir functions:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="c1"># file: lib/f1/queries.ex</span>

   <span class="kn">import</span> <span class="no">AyeSQL</span><span class="p">,</span> <span class="ss">only:</span> <span class="p">[</span><span class="ss">defqueries:</span> <span class="m">3</span><span class="p">]</span>

   <span class="n">defqueries</span><span class="p">(</span><span class="no">F1</span><span class="o">.</span><span class="no">Query</span><span class="o">.</span><span class="no">Season</span><span class="p">,</span> <span class="sd">"</span><span class="s2">query/season.sql"</span><span class="p">,</span> <span class="ss">repo:</span> <span class="no">F1</span><span class="o">.</span><span class="no">Repo</span><span class="p">)</span>
</code></pre></div>
<ul>
<li>Modify our configuration to run the queries by default:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="c1"># file: config/config.exs</span>

   <span class="kn">import</span> <span class="no">Config</span>

   <span class="n">config</span> <span class="ss">:ayesql</span><span class="p">,</span> <span class="ss">run?:</span> <span class="no">true</span>
</code></pre></div>
<p>Then we can call our query as follows:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="no">F1</span><span class="o">.</span><span class="no">Query</span><span class="o">.</span><span class="no">Season</span><span class="o">.</span><span class="n">get_accidents</span><span class="p">(</span><span class="ss">from:</span> <span class="m">1974</span><span class="p">,</span> <span class="ss">to:</span> <span class="m">1990</span><span class="p">)</span>
<span class="p">{</span><span class="ss">:ok</span><span class="p">,</span>
 <span class="p">[</span>
   <span class="p">%{</span><span class="ss">percentage:</span> <span class="c1">#Decimal&lt;3.67&gt;, season: 1974.0},</span>
   <span class="p">%{</span><span class="ss">percentage:</span> <span class="c1">#Decimal&lt;14.88&gt;, season: 1975.0},</span>
   <span class="p">%{</span><span class="ss">percentage:</span> <span class="c1">#Decimal&lt;11.06&gt;, season: 1976.0},</span>
   <span class="p">%{</span><span class="ss">percentage:</span> <span class="c1">#Decimal&lt;12.58&gt;, season: 1977.0},</span>
   <span class="p">%{</span><span class="ss">percentage:</span> <span class="c1">#Decimal&lt;10.19&gt;, season: 1978.0},</span>
   <span class="o">...</span>
 <span class="p">]}</span>
</code></pre></div>
<p>I don&#39;t know about you, but IMHO this seems like a maintainable way of dealing with complex SQL queries.</p>

<p><img src="https://media.giphy.com/media/cdGQHR4Qzefx6/giphy.gif" alt="easy"></p>

<p>AyeSQL provides query runners for Ecto and Postgrex out-of-the-box. In the previous example we used Ecto&#39;s runner. If we need a different output or query a different database e.g. MSSQL, we could implement the behaviour <code>AyeSQL.Runner</code> for our use case.</p>

<blockquote>
<p><strong>Note</strong>: In the past year, my team and I had to write an Elixir application with a pre-existent MSSQL database. <code>AyeSQL.Runner</code> behaviour and <a href="https://github.com/livehelpnow/tds">TDS</a> library allowed us to query the database with ease.</p>
</blockquote>

<h2 id="conclusion">Conclusion</h2>

<p>I&#39;m hoping this article helps change the negative reputation raw SQL queries have.</p>

<p>Yesql inspired libraries like AyeSQL, can help you to be more productive when your ORM or language mapper have failed you.</p>

<p><img src="https://media.giphy.com/media/fdhZs6PUqxSQU/giphy.gif" alt="There is another"></p>

<p>I&#39;ll write more about AyeSQL features in future articles, but for now happy coding!</p>

<p><em>Cover image by <a href="https://unsplash.com/@arstyy">Austin Neill</a></em></p>
<!--kg-card-end: markdown-->]]>
          </content:encoded>
        </item>
        <item>
          <title>Elixir Pubsub In Less Than 50 Lines</title>
          <description>A small Elixir pubsub implementation using built-in module :pg2</description>
          <guid>https://thebroken.link/elixir-pubsub-in-less-than-50-lines/</guid>
          <dc:creator>Alex de Sousa</dc:creator>
          <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
          <link>https://thebroken.link/elixir-pubsub-in-less-than-50-lines/</link>
          <content:encoded>
            <![CDATA[<!--kg-card-begin: markdown--><p><code>:pg2</code> is a mostly unknown, but powerful Erlang module. It provides an API for creating process groups.</p>

<h2 id="process-group">Process Group</h2>

<p>So, what&#39;s a process group? Well... it&#39;s a group of Erlang/Elixir processes.</p>

<p>Perhaps, the correct question would be, why do we care about process groups? Well, process groups are the foundation for publisher-subscribers (pubsubs for short).</p>

<h2 id="pg2">PG2</h2>

<p>Understanding <code>:pg2</code> API and how it relates to a pubsub API will make it easier to understand: </p>

<ul>
<li>Every process group is a <code>channel</code> e.g. a group called <code>:my_channel</code> is created:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="n">iex</span><span class="o">&gt;</span> <span class="ss">:pg2</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:my_channel</span><span class="p">)</span>
   <span class="ss">:ok</span>
</code></pre></div>
<ul>
<li>Every process in a group is a <code>subscriber</code> e.g. <code>self()</code> is part of <code>:my_channel</code> group:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="n">iex</span><span class="o">&gt;</span> <span class="ss">:pg2</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="ss">:my_channel</span><span class="p">,</span> <span class="n">self</span><span class="p">())</span>
   <span class="ss">:ok</span>
</code></pre></div>
<ul>
<li>A <code>publisher</code> can <code>send/2</code> messages to a <code>channel</code> e.g. the publisher gets all the members of the group <code>:my_channel</code> and sends <code>&quot;Some message&quot;</code>:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="n">iex</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="ss">:pg2</span><span class="o">.</span><span class="n">get_members</span><span class="p">(</span><span class="ss">:my_channel</span><span class="p">)</span>
   <span class="ss">:ok</span>
   <span class="n">iex</span><span class="o">&gt;</span> <span class="n">for</span> <span class="n">member</span> <span class="o">&lt;-</span> <span class="n">members</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="n">send</span><span class="p">(</span><span class="n">member</span><span class="p">,</span> <span class="sd">"</span><span class="s2">Some message"</span><span class="p">)</span>
</code></pre></div>
<ul>
<li>A <code>subscriber</code> will receive the messages in its mailbox:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="n">iex</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
   <span class="sd">"</span><span class="s2">Some message"</span>
   <span class="ss">:ok</span>
</code></pre></div>
<ul>
<li>A <code>subscriber</code> can unsubscribe from a <code>channel</code> e.g. <code>self()</code> leaves the group <code>:my_channel</code>:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="n">iex</span><span class="o">&gt;</span> <span class="ss">:pg2</span><span class="o">.</span><span class="n">leave</span><span class="p">(</span><span class="ss">:my_channel</span><span class="p">,</span> <span class="n">self</span><span class="p">())</span>
   <span class="ss">:ok</span>
</code></pre></div>
<ul>
<li>A <code>channel</code> can be deleted:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="n">iex</span><span class="o">&gt;</span> <span class="ss">:pg2</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:my_channel</span><span class="p">)</span>
   <span class="ss">:ok</span>
</code></pre></div>
<p>And that&#39;s it! That&#39;s the API. And you know what&#39;s the best thing about it? <strong>It can work between connected nodes</strong>. Keep reading and you&#39;ll see :)</p>

<p><img src="https://media.giphy.com/media/mcueTtCHvqNPy/giphy.gif" alt="Message in cereal"></p>

<h2 id="implementing-a-pubsub">Implementing a PubSub</h2>

<p>A <code>PubSub</code> has three main functions:</p>

<ul>
<li><code>subscribe/1</code> for subscribing to a <code>channel</code>:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="k">def</span> <span class="n">subscribe</span><span class="p">(</span><span class="n">channel</span><span class="p">)</span> <span class="k">do</span>
     <span class="n">pid</span> <span class="o">=</span> <span class="n">self</span><span class="p">()</span>

     <span class="k">case</span> <span class="ss">:pg2</span><span class="o">.</span><span class="n">get_members</span><span class="p">(</span><span class="n">channel</span><span class="p">)</span> <span class="k">do</span>
       <span class="n">members</span> <span class="ow">when</span> <span class="n">is_list</span><span class="p">(</span><span class="n">members</span><span class="p">)</span> <span class="o">-&gt;</span>
         <span class="k">if</span> <span class="n">pid</span> <span class="ow">in</span> <span class="n">members</span> <span class="k">do</span>
           <span class="ss">:ok</span>                     <span class="c1"># It's already subscribed.</span>
         <span class="k">else</span>
           <span class="ss">:pg2</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="n">pid</span><span class="p">)</span> <span class="c1"># Subscribes to channel</span>
         <span class="k">end</span>

       <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="p">{</span><span class="ss">:no_such_group</span><span class="p">,</span> <span class="o">^</span><span class="n">channel</span><span class="p">}}</span> <span class="o">-&gt;</span>
         <span class="ss">:pg2</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">channel</span><span class="p">)</span>      <span class="c1"># Creates channel</span>
         <span class="ss">:pg2</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="n">pid</span><span class="p">)</span>   <span class="c1"># Subscribe to channel</span>
     <span class="k">end</span>
   <span class="k">end</span>
</code></pre></div>
<ul>
<li><code>unsubscribe/1</code> for unsubscribing from a <code>channel</code>.</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">    <span class="k">def</span> <span class="n">unsubscribe</span><span class="p">(</span><span class="n">channel</span><span class="p">)</span> <span class="k">do</span>
      <span class="n">pid</span> <span class="o">=</span> <span class="n">self</span><span class="p">()</span>

      <span class="k">case</span> <span class="ss">:pg2</span><span class="o">.</span><span class="n">get_members</span><span class="p">(</span><span class="n">channel</span><span class="p">)</span> <span class="k">do</span>
        <span class="p">[</span><span class="o">^</span><span class="n">pid</span><span class="p">]</span> <span class="o">-&gt;</span>
          <span class="ss">:pg2</span><span class="o">.</span><span class="n">leave</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="n">pid</span><span class="p">)</span>   <span class="c1"># Unsubscribes from channel</span>
          <span class="ss">:pg2</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">channel</span><span class="p">)</span>       <span class="c1"># Deletes the channel</span>

        <span class="n">members</span> <span class="ow">when</span> <span class="n">is_list</span><span class="p">(</span><span class="n">members</span><span class="p">)</span> <span class="o">-&gt;</span>
          <span class="k">if</span> <span class="n">pid</span> <span class="ow">in</span> <span class="n">members</span> <span class="k">do</span>
            <span class="ss">:pg2</span><span class="o">.</span><span class="n">leave</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="n">pid</span><span class="p">)</span> <span class="c1"># Unsubscribes from channel</span>
          <span class="k">else</span>
            <span class="ss">:ok</span>                      <span class="c1"># It's already unsubscribed</span>
          <span class="k">end</span>

        <span class="n">_</span> <span class="o">-&gt;</span>
          <span class="ss">:ok</span>
      <span class="k">end</span>
    <span class="k">end</span>
</code></pre></div>
<ul>
<li><code>publish/2</code> for sending a <code>message</code> to a <code>channel</code>.</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="k">def</span> <span class="n">publish</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span> <span class="k">do</span>
     <span class="k">case</span> <span class="ss">:pg2</span><span class="o">.</span><span class="n">get_members</span><span class="p">(</span><span class="n">channel</span><span class="p">)</span> <span class="k">do</span>
       <span class="p">[</span><span class="n">_</span> <span class="o">|</span> <span class="n">_</span><span class="p">]</span> <span class="o">=</span> <span class="n">members</span> <span class="o">-&gt;</span>
         <span class="n">for</span> <span class="n">member</span> <span class="o">&lt;-</span> <span class="n">members</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="n">send</span><span class="p">(</span><span class="n">member</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
         <span class="ss">:ok</span>

       <span class="n">_</span> <span class="o">-&gt;</span>
         <span class="ss">:ok</span>
     <span class="k">end</span>
   <span class="k">end</span>
</code></pre></div>
<p>For a full implementation of <code>PubSub</code> you can check <a href="https://gist.github.com/alexdesousa/4d592fe206cca17393affaefa4c8fd33">this gist</a>.</p>

<p>I usually create a <code>.iex.exs</code> file in my <code>$HOME</code> folder and then run <code>iex</code>. You could do the same with the previous gist by doing the following:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">~ <span class="nv">$ PUBSUB</span><span class="o">=</span><span class="s2">"https://gist.githubusercontent.com/alexdesousa/4d592fe206cca17393affaefa4c8fd33/raw/4d84894f016bd9eef84bba647c77c62b9c9a6094/pub_sub.ex"</span>
~ <span class="nv">$ </span>curl <span class="s2">"</span><span class="nv">$PUBSUB</span><span class="s2">"</span> <span class="nt">-o</span> .iex.exs
~ <span class="nv">$ </span>iex
</code></pre></div>
<p><img src="https://media.giphy.com/media/3o7btNa0RUYa5E7iiQ/giphy.gif" alt="It&#39;s that easy"></p>

<h2 id="distributed-pubsub">Distributed PubSub</h2>

<p>For our distributed experiment we&#39;ll need two nodes. My machine is called <code>matrix</code> and both nodes will be <code>neo</code> and <code>trinity</code> respectively:</p>

<ul>
<li><code>:neo@matrix</code>:</li>
</ul>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">   alex@matrix ~ <span class="nv">$ </span>iex <span class="nt">--sname</span> neo
   iex<span class="o">(</span>neo@matrix<span class="o">)</span>1&gt;
</code></pre></div>
<ul>
<li><code>:trinity@matrix</code>:</li>
</ul>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">   alex@matrix ~ <span class="nv">$ </span>iex <span class="nt">--sname</span> trinity
   iex<span class="o">(</span>trinity@matrix<span class="o">)</span>1&gt; Node.connect<span class="o">(</span>:neo@matrix<span class="o">)</span> <span class="c"># Connects both nodes</span>
</code></pre></div>
<p>Now <code>:neo@matrix</code> can subscribe to <code>:mainframe</code> channel:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="n">neo</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">1</span><span class="o">&gt;</span> <span class="no">PubSub</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="ss">:mainframe</span><span class="p">)</span>
<span class="ss">:ok</span>
</code></pre></div>
<p>And <code>:trinity@matrix</code> can send a message:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="n">trinity</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">2</span><span class="o">&gt;</span> <span class="no">PubSub</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="ss">:mainframe</span><span class="p">,</span> <span class="sd">"</span><span class="s2">Wake up, Neo..."</span><span class="p">)</span>
<span class="ss">:ok</span> 
</code></pre></div>
<blockquote>
<p><strong>Note</strong>: Sometimes it takes a bit of time for nodes to synchronize their process groups, so you might need to <code>publish/2</code> your message twice.</p>
</blockquote>

<p>Finally, <code>:neo@matrix</code> should receive the message:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="n">neo</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">2</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
<span class="sd">"</span><span class="s2">Wake up, Neo..."</span>
<span class="ss">:ok</span>
</code></pre></div>
<p>And that&#39;s it. A powerful pubsub in a few lines of code thanks to <code>:pg2</code>.</p>

<p><img src="https://media.giphy.com/media/S27iRp6ypEcnK/giphy.gif" alt="Follow the white rabbit"></p>

<h2 id="conclusion">Conclusion</h2>

<p>Erlang has several built-in hidden gems like <code>:pg2</code> that make our lives easier.</p>

<p><img src="https://media.giphy.com/media/PdfNwG98g6Sxq/giphy.gif" alt="gem"></p>

<p>Happy coding!</p>
<!--kg-card-end: markdown-->]]>
          </content:encoded>
        </item>
        <item>
          <title>Managing Dotfiles with Ansible</title>
          <description>A small tutorial on how to use Ansible to manage your dotfiles.</description>
          <guid>https://thebroken.link/managing-dotfiles-with-ansible/</guid>
          <dc:creator>Alex de Sousa</dc:creator>
          <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
          <link>https://thebroken.link/managing-dotfiles-with-ansible/</link>
          <content:encoded>
            <![CDATA[<!--kg-card-begin: markdown--><p>When developers get tired of configuring again and again our machines, we tend to create a dotfiles repository.</p>

<h2 id="a-dotfiles-repository">A Dotfiles Repository</h2>

<blockquote>
<p><strong>Dotfiles</strong> are commonly used for storing user preferences or preserving the state of a utility, and are frequently created implicitly by using various utilities.</p>
</blockquote>

<p>It all starts with a small repository that contains configuration files for common tools e.g. <code>.zshrc</code>, <code>.vimrc</code>, etc. However, every time we configure a new machine, we need to copy those files <em>by hand</em>.</p>

<p>We pride ourselves with our ability to automate any task. Therefore, the next logical step for a dotfiles repository is to create a &quot;small&quot; shell script for automating tool installation and machine configuration.</p>

<p>All is well at first, but that &quot;small&quot; script ends up being hundreds of lines long and hard to maintain.</p>

<p><img src="https://media.giphy.com/media/S0KRynVEROiOs/giphy.gif" alt="This is madness"></p>

<h2 id="ansible-to-the-rescue">Ansible to the Rescue</h2>

<blockquote>
<p><a href="https://www.ansible.com/">Ansible</a> is an configuration management tool. It provides its own language to describe system configuration.</p>
</blockquote>

<p>This is not a new idea, but it feels like one: configure your own machine the same way you configure your servers... With Ansible.</p>

<blockquote>
<p><strong>Note</strong>: I&#39;m using Debian throughout this tutorial, though the same can be accomplished with any architecture and operative system as long as Ansible is available for it.</p>
</blockquote>

<p><img src="https://media.giphy.com/media/F1YaFvtJ7VlwA/giphy.gif" alt="Where&#39;s Ansible&#39;s supersuit?"></p>

<h3 id="bootstrapping-ansible">Bootstrapping Ansible</h3>

<p>For installing and configuring stuff with Ansible, we need to first install Ansible. We can use a small shell script to accomplish this. Some of the variables like <code>$HOSTS</code> and <code>$PLAYBOOK</code> will make sense in the next sections:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/usr/bin/env bash</span>

<span class="nb">set</span> <span class="nt">-e</span>

<span class="c"># Dotfiles' project root directory</span>
<span class="nv">ROOTDIR</span><span class="o">=</span><span class="s2">"</span><span class="k">$(</span><span class="nb">cd</span> <span class="s2">"</span><span class="k">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="s2">"</span><span class="k">)</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nb">pwd</span><span class="k">)</span><span class="s2">"</span>
<span class="c"># Host file location</span>
<span class="nv">HOSTS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$ROOTDIR</span><span class="s2">/hosts"</span>
<span class="c"># Main playbook</span>
<span class="nv">PLAYBOOK</span><span class="o">=</span><span class="s2">"</span><span class="nv">$ROOTDIR</span><span class="s2">/dotfiles.yml"</span>

<span class="c"># Installs ansible</span>
apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> ansible

<span class="c"># Runs Ansible playbook using our user.</span>
ansible-playbook <span class="nt">-i</span> <span class="s2">"</span><span class="nv">$HOSTS</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$PLAYBOOK</span><span class="s2">"</span> <span class="nt">--ask-become-pass</span>

<span class="nb">exit </span>0
</code></pre></div>
<p>Running the previous script as our sudoer user will effectively install Ansible and run our main <em>playbook</em> with all our <em>roles</em>.</p>

<blockquote>
<p><strong>Playbook</strong>: A file that defines several tasks to be executed in a target machine.
<strong>Role</strong>: Organizes multiple, related tasks with the data needed to run those tasks (variables, files, templates).</p>
</blockquote>

<h3 id="basic-folder-structure">Basic Folder Structure</h3>

<p>Once we have our bootstrap script in place, we can start writing Ansible configuration files.</p>

<p>In our dotfiles repository, our target is our own machine. This is very easy to define in our <code>hosts</code> file (with local connection so it doesn&#39;t require an ssh key):</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="c1"># file: hosts</span>
<span class="pi">[</span><span class="nv">local</span><span class="pi">]</span>
<span class="s">localhost</span>

<span class="pi">[</span><span class="nv">local</span><span class="pi">:</span><span class="nv">vars</span><span class="pi">]</span>
<span class="s">ansible_connection=local</span>
</code></pre></div>
<blockquote>
<p><strong>Note</strong>: In our <code>bootstrap.sh</code> script, this file is found in the variable <code>$HOSTS</code>.</p>
</blockquote>

<p>Then we need a <em>playbook</em> that lists every <em>role</em> we want to deploy and configure in our machine.</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="c1"># file: dotfiles.yml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up local workstation</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s">zsh</span>
      <span class="na">tags</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">zsh</span>
</code></pre></div>
<p>In our example, we&#39;ll install <code>zsh</code> role.</p>

<blockquote>
<p><strong>Note</strong>: In our <code>bootstrap.sh</code> script, this files is found in the variable <code>$PLAYBOOK</code>.</p>
</blockquote>

<p>In general, our folder structure would look something like:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">└ dotfiles
  - bootstrap.sh
  - dotfiles.yml
  - hosts
  └ roles
    └ zsh
      └ files
        - zshrc.link
      └ tasks
        - main.yml
</code></pre></div>
<h3 id="zsh-role">ZSh role</h3>

<p>The following would be our <code>zsh</code> role tasks for:</p>

<ul>
<li>Installing <code>zsh</code>.</li>
<li>Setting it up as our default shell.</li>
<li>Installing Oh-My-ZSH.</li>
<li>Linking our <code>.zshrc</code> configuration file to our home folder.</li>
</ul>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="c1"># file: roles/zsh/tasks/main.yml</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Installs zsh | apt</span>
  <span class="na">become</span><span class="pi">:</span> <span class="s">yes</span>
  <span class="na">become_user</span><span class="pi">:</span> <span class="s">root</span>
  <span class="na">apt</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">zsh</span>
    <span class="na">state</span><span class="pi">:</span> <span class="s">present</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Installs curl | apt</span>
  <span class="na">become</span><span class="pi">:</span> <span class="s">yes</span>
  <span class="na">become_user</span><span class="pi">:</span> <span class="s">root</span>
  <span class="na">apt</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">curl</span>
    <span class="na">state</span><span class="pi">:</span> <span class="s">present</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Sets zsh as default shell for my user | command</span>
  <span class="na">become</span><span class="pi">:</span> <span class="s">yes</span>
  <span class="na">become_user</span><span class="pi">:</span> <span class="s">root</span>
  <span class="na">command</span><span class="pi">:</span> <span class="s">chsh -s /bin/zsh {{ lookup('env' 'USER') }}</span>
  <span class="na">register</span><span class="pi">:</span> <span class="s">zsh_for_user</span>
  <span class="na">failed_when</span><span class="pi">:</span> <span class="s">zsh_for_user.rc &gt;= 1</span>
  <span class="na">changed_when</span><span class="pi">:</span> <span class="s">zsh_for_user.rc == 0</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checks for oh-my-zsh installation | stat</span>
  <span class="na">stat</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">lookup('env',</span><span class="nv"> </span><span class="s">'HOME')</span><span class="nv"> </span><span class="s">}}/.oh-my-zsh"</span>
  <span class="na">register</span><span class="pi">:</span> <span class="s">oh_my_zsh_stat</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Installs oh-my-zsh | raw</span>
  <span class="na">raw</span><span class="pi">:</span> <span class="s1">'</span><span class="s">sh</span><span class="nv"> </span><span class="s">-c</span><span class="nv"> </span><span class="s">"$(curl</span><span class="nv"> </span><span class="s">-fsSL</span><span class="nv"> </span><span class="s">https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"'</span>
  <span class="na">when</span><span class="pi">:</span> <span class="s">not oh_my_zsh_stat.stat.exists</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Links .zshrc file | file</span>
  <span class="na">file</span><span class="pi">:</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">lookup('env',</span><span class="nv"> </span><span class="s">'ROOTDIR')</span><span class="nv"> </span><span class="s">}}/roles/zsh/files/zshrc.link"</span>
    <span class="na">dest</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">lookup('env',</span><span class="nv"> </span><span class="s">'HOME')</span><span class="nv"> </span><span class="s">}}/.zshrc"</span>
    <span class="na">state</span><span class="pi">:</span> <span class="s">link</span>
    <span class="na">force</span><span class="pi">:</span> <span class="s">yes</span></code></pre></figure>

<h3 id="running-our-bootstrap-script">Running Our Bootstrap Script</h3>

<p>Finally, we can run our script:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">~/dotfiles <span class="nv">$ </span><span class="nb">chmod</span> +x bootstrap.sh
~/dotfiles <span class="nv">$ </span><span class="nb">sudo </span>bootstrap.sh
</code></pre></div>
<p>This script will:</p>

<ul>
<li>Install Ansible.</li>
<li>Run our playbook, which means installing and configuring <code>zsh</code>.</li>
</ul>

<p><img src="https://media.giphy.com/media/3o84sq21TxDH6PyYms/giphy.gif" alt="Unlimited power"></p>

<h3 id="conclusion">Conclusion</h3>

<p>There are more cool features you can use to customize your system using Ansible. You can check my <a href="https://github.com/alexdesousa/dotfiles">dotfiles</a> repository if you want to see a fully working example.</p>

<p>Additionally, if you want to know more about Ansible, you can check <a href="https://serversforhackers.com/c/an-ansible2-tutorial">this amazing tutorial</a>.</p>

<p>I hope you find this useful :)</p>

<p><img src="https://media.giphy.com/media/kdiLau77NE9Z8vxGSO/giphy.gif" alt="Installation"></p>

<p>Happy coding!</p>
<!--kg-card-end: markdown-->]]>
          </content:encoded>
        </item>
        <item>
          <title>Oath: Don't Loose Your Keys!</title>
          <description>A ZSH plugin for handling your keys.</description>
          <guid>https://thebroken.link/oath-dont-loose-your-keys/</guid>
          <dc:creator>Alex de Sousa</dc:creator>
          <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
          <link>https://thebroken.link/oath-dont-loose-your-keys/</link>
          <content:encoded>
            <![CDATA[<!--kg-card-begin: markdown--><p>Recently, I needed to reset my phone. I spent some time backing up my pictures and documents. Everything was going great. But then, I hit a roadblock.</p>

<h2 id="the-problem">The problem</h2>

<p>One-time passwords have become very handy for logging into several sites from Twitter to Coinbase. This passwords are 6 digit tokens generated using the current time and a private key. I was using Google Authenticator for getting my one-time passwords. Sadly, this app does not provide a way to backup the private keys.</p>

<p>The damage was done. I couldn&#39;t retrieve the private keys, so I needed to regenerate all of them in every site individually. I thought about my future self dealing with the same issue and I knew I needed a sustainable solution.</p>

<p><img src="https://media.giphy.com/media/llbEoVMhkLngWlzVVa/giphy.gif" alt="Let&#39;s change the lightbulb"></p>

<h2 id="the-research">The research</h2>

<p>I wanted a one-time password solution that:</p>

<ul>
<li>Didn&#39;t rely on my phone or any app.</li>
<li>Could also be used in my computer.</li>
<li>Was offline (no private keys stored in the cloud).</li>
</ul>

<p>That&#39;s when I discovered <code>oathtool</code>: a command line tool for generating 6 digit tokens given a private key.</p>

<blockquote>
<p>I installed it using <code>sudo apt install oathtool</code></p>
</blockquote>

<p>Generating a 6 digit token with <code>oathtool</code> is as easy as doing the following:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>oathtool <span class="nt">-b</span> <span class="nt">--totp</span> <span class="s1">'MyPrivateKey'</span>
798946
</code></pre></div>
<p>Discovering this tool was a good start, but I needed a good way of dealing with the private keys. Then I stumbled upon <a href="https://www.cyberciti.biz/faq/use-oathtool-linux-command-line-for-2-step-verification-2fa/">this article</a>. The author created two scripts:</p>

<ul>
<li>One for encrypting the private key into a file using <code>gpg2</code>.</li>
<li>One for decrypting the private key and retrieving the 6 digit token using <code>oathtool</code>.</li>
</ul>

<p>Additionally, the 6 digit token was automatically copied to the clipboard using <code>xclip</code>.</p>

<blockquote>
<p>I installed both tools by running <code>sudo apt install gnupg2 xclip</code></p>
</blockquote>

<p>I loved the solution! Though it had some flaws like storing temporarily an unencrypted file with the private key, it was a great idea :)</p>

<p><img src="https://media.giphy.com/media/Mjq9vmDuJlBKw/giphy.gif" alt="Great idea"></p>

<h2 id="the-plugin">The plugin</h2>

<p>I wrote <a href="https://github.com/alexdesousa/oath">Oath ZSH plugin</a> by gathering the best ideas from that article. I ended up with the following commands:</p>

<ul>
<li>Adding a private key:</li>
</ul>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">   <span class="nv">$ </span>oath add twitter.com
   Private key:
   <span class="o">[</span>SUCCESS]  Key created <span class="k">for </span>twitter.com
</code></pre></div>
<ul>
<li>Showing a 6 digit token (it&#39;ll ask for the gpg password):</li>
</ul>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">   <span class="nv">$ </span>oath twitter.com
   123456
   <span class="o">[</span>SUCCESS]  Code copied to clipboard
</code></pre></div>
<ul>
<li>Deleting a private key (it&#39;ll ask for the gpg password):</li>
</ul>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">   <span class="nv">$ </span>oath delete twitter.com
   <span class="o">[</span>WARN]     Deleting /home/user/.oath/twitter.com/B743BC73B5F90E2305142D226BBCD02E89ABBC79.gpg.gpg
   <span class="o">[</span>WARN]     Deleting /home/user/.oath/twitter.com
   <span class="o">[</span>SUCCESS]  Key deleted <span class="k">for </span>twitter.com
</code></pre></div>
<p>The same private keys I added to <code>oath</code>, I also added them to my phone&#39;s Google Authenticator app. That way both, my computer and phone, generate the same 6 digit token at a given time.</p>

<p>The only difference is that now I can backup everything. I just need to copy the following folders:</p>

<ul>
<li><code>$HOME/.gnupg/</code>: GPG folder with all the gpg keys.</li>
<li><code>$HOME/.oath/</code>: Oath folder where all the private keys are stored.</li>
</ul>

<blockquote>
<p>For more info, visit <a href="https://github.com/alexdesousa/oath">Oath Github repository</a>.</p>
</blockquote>

<p><img src="https://media.giphy.com/media/Xd1EhywNhOjq5EPn5t/giphy.gif" alt="Safety"></p>

<h2 id="conclusion">Conclusion</h2>

<p>Though this solution might not be for everyone, it solves the problem I had. Now I can reset my phone at any time and not worrying about my private keys, because they&#39;re safely backed up.</p>

<p><img src="https://media.giphy.com/media/de0AlLgV7XTRhEudoL/giphy.gif" alt="The keys"></p>

<p>Happy hacking!</p>
<!--kg-card-end: markdown-->]]>
          </content:encoded>
        </item>
        <item>
          <title>Skogsrå: Simplifying Your Elixir Configuration</title>
          <description>Improving Elixir configurations for small and large projects.</description>
          <guid>https://thebroken.link/skogsra-simplifying-your-elixir-configuration/</guid>
          <dc:creator>Alex de Sousa</dc:creator>
          <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
          <link>https://thebroken.link/skogsra-simplifying-your-elixir-configuration/</link>
          <content:encoded>
            <![CDATA[<!--kg-card-begin: markdown--><p>Once an Elixir project is large enough, maintaining config files and configuration variables becomes a nightmare:</p>

<ul>
<li>Configuration variables are scattered throughout the code so it&#39;s very easy to forget a configuration setting.</li>
<li>OS environment variables must be casted to the correct type as they are always strings.</li>
<li>Required variables must be checked by hand.</li>
<li>Setting defaults can sometimes be a bit cumbersome.</li>
<li>No type safety.</li>
</ul>

<p><img src="https://media.giphy.com/media/S0KRynVEROiOs/giphy.gif" alt="madness"></p>

<p>Ideally though, configurations should be:</p>

<ul>
<li>Documented.</li>
<li>Easy to find.</li>
<li>Easy to read.</li>
<li>Declarative.</li>
</ul>

<p>In summary: <strong>easy to maintain</strong>.</p>

<h2 id="the-problem">The problem</h2>

<p>We&#39;ll elaborate using the the following example:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">config</span> <span class="ss">:myapp</span><span class="p">,</span>
  <span class="ss">hostname:</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="sd">"</span><span class="s2">HOSTNAME"</span><span class="p">)</span> <span class="o">||</span> <span class="sd">"</span><span class="s2">localhost"</span><span class="p">,</span>
  <span class="ss">port:</span> <span class="no">String</span><span class="o">.</span><span class="n">to_integer</span><span class="p">(</span><span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="sd">"</span><span class="s2">PORT"</span><span class="p">)</span> <span class="o">||</span> <span class="sd">"</span><span class="s2">80"</span><span class="p">)</span>
</code></pre></div>
<p>The previous code is:</p>

<ul>
<li>Undocumented: <code>hostname</code> and <code>port</code> of what?</li>
<li>Hard to read: Too many concerns in a single line.</li>
<li>Hard to find: where are these <code>hostname</code> and <code>port</code> used?</li>
<li>Not declarative: we&#39;re telling Elixir <strong><em>how</em> to retrieve the values</strong> instead of <strong><em>what</em> are the values we want</strong>.</li>
</ul>

<p>Conclusion: <strong>it&#39;s hard to maintain</strong>.</p>

<h2 id="writing-a-config-module">Writing a config module</h2>

<p>We could mitigate some of these problems with one simple approach:</p>

<ul>
<li>Create a module for your configs.</li>
<li>Create a function for every single configuration parameter you app has.</li>
</ul>

<p>The following, though a bit more verbose, would be the equivalent to the previous config:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">Myapp</span><span class="o">.</span><span class="no">Config</span> <span class="k">do</span>
  <span class="nv">@moduledoc</span> <span class="sd">"</span><span class="s2">My app config."</span>

  <span class="nv">@doc</span> <span class="sd">"</span><span class="s2">My hostname"</span>
  <span class="k">def</span> <span class="n">hostname</span> <span class="k">do</span>
    <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="sd">"</span><span class="s2">HOSTNAME"</span><span class="p">)</span> <span class="o">||</span> <span class="sd">"</span><span class="s2">localhost"</span>
  <span class="k">end</span>

  <span class="nv">@doc</span> <span class="sd">"</span><span class="s2">My port"</span>
  <span class="k">def</span> <span class="n">port</span> <span class="k">do</span>
    <span class="no">String</span><span class="o">.</span><span class="n">to_integer</span><span class="p">(</span><span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="sd">"</span><span class="s2">PORT"</span><span class="p">)</span> <span class="o">||</span> <span class="sd">"</span><span class="s2">80"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Unlike our original code, this one is:</p>

<ul>
<li>Documented: Every function has <code>@doc</code> attribute.</li>
<li>Easy to find: We just need to to look for calls to functions defined in this module.</li>
</ul>

<p>However, we still have essentially the same code we had before, which is:</p>

<ul>
<li>Hard to read.</li>
<li>Not declarative.</li>
</ul>

<p>There&#39;s gotta be a better way!</p>

<p><img src="https://media.giphy.com/media/WTdg5GBR45X6NbxqJK/giphy.gif" alt="almost"></p>

<h2 id="there-is-a-better-way-meet-skogsr">There is a better way - Meet Skogsrå</h2>

<p><a href="https://hexdocs.pm/skogsra/readme.html">Skogsrå</a> is a library for loading configuration variables with ease, providing:</p>

<ul>
<li>Variable defaults.</li>
<li>Automatic type casting of values.</li>
<li>Automatic docs and spec generation.</li>
<li>OS environment template generation.</li>
<li>Run-time reloading.</li>
<li>Setting variable&#39;s values at run-time.</li>
<li>Fast cached values access by using <code>:persistent_term</code> as temporal storage.</li>
<li>YAML configuration provider for Elixir releases.</li>
</ul>

<p>The previous example can be re-written as follows:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">Myapp</span><span class="o">.</span><span class="no">Config</span> <span class="k">do</span>
  <span class="nv">@moduledoc</span> <span class="sd">"</span><span class="s2">My app config."</span>
  <span class="kn">use</span> <span class="no">Skogsra</span>

  <span class="nv">@envdoc</span> <span class="sd">"</span><span class="s2">My hostname"</span>
  <span class="n">app_env</span> <span class="ss">:hostname</span><span class="p">,</span> <span class="ss">:myapp</span><span class="p">,</span> <span class="ss">:hostname</span><span class="p">,</span>
    <span class="ss">default:</span> <span class="sd">"</span><span class="s2">localhost"</span><span class="p">,</span>
    <span class="ss">os_env:</span> <span class="sd">"</span><span class="s2">HOSTNAME"</span>

  <span class="nv">@envdoc</span> <span class="sd">"</span><span class="s2">My port"</span>
  <span class="n">app_env</span> <span class="ss">:port</span><span class="p">,</span> <span class="ss">:myapp</span><span class="p">,</span> <span class="ss">:port</span><span class="p">,</span>
    <span class="ss">default:</span> <span class="m">80</span><span class="p">,</span>
    <span class="ss">os_env:</span> <span class="sd">"</span><span class="s2">PORT"</span>
<span class="k">end</span>
</code></pre></div>
<p>This module will have these functions:</p>

<ul>
<li><code>Myapp.Config.hostname/0</code> for retrieving the hostname.</li>
<li><code>Myapp.Config.port/0</code> for retrieving the port.</li>
</ul>

<p>With this implementation, we end up with:</p>

<ul>
<li>Documented configuration variables: Via <code>@envdoc</code> module attribute.</li>
<li>Easy to find: Every configuration variable will be in <code>Myapp.Config</code> module.</li>
<li>Easy to read: <code>app_env</code> options are self explanatory.</li>
<li>Declarative: we&#39;re telling Skogsrå <em>what we want</em>.</li>
<li><strong>Bonus</strong>: Type-safety (see <a href="#strong-typing">Strong typing</a> section).</li>
</ul>

<p><img src="https://media.giphy.com/media/wAxlCmeX1ri1y/giphy.gif" alt="dance"></p>

<h2 id="how-it-works">How it works</h2>

<p>Calling <code>Myapp.Config.port()</code> will retrieve the value for the port in the following order:</p>

<ol>
<li>From the OS environment variable <code>$PORT</code>.</li>
<li><p>From the configuration file e.g. our test config file might look like:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="c1"># file config/test.exs</span>
<span class="kn">use</span> <span class="no">Mix</span><span class="o">.</span><span class="no">Config</span>

<span class="n">config</span> <span class="ss">:myapp</span><span class="p">,</span>
  <span class="ss">port:</span> <span class="m">4000</span>
</code></pre></div></li>
<li><p>From the default value, if it exists (In this case, it would return the integer <code>80</code>).</p></li>
</ol>

<p>The values will be casted as the default values&#39; type unless the option <code>type</code> is provided (see <a href="#explicit-type-casting">Explicit type casting</a> section).</p>

<p>Though Skogsrå has <a href="https://hexdocs.pm/skogsra/readme.html">many options and features</a>, we will just explore the ones I use the most:</p>

<ul>
<li><a href="#explicit-type-casting">Explicit type casting</a>.</li>
<li><a href="#defining-custom-types">Defining custom types</a>.</li>
<li><a href="#required-variables">Required variables</a>.</li>
<li><a href="#strong-typing">Strong typing</a>.</li>
</ul>

<h2 id="explicit-type-casting">Explicit type casting</h2>

<p>When the types are not <code>any</code>, <code>binary</code>, <code>integer</code>, <code>float</code>, <code>boolean</code> or <code>atom</code>, Skogsrå cannot automatically cast values solely by the default value&#39;s type. Types then need to be specified explicitly using the option <code>type</code>. The available types are:</p>

<ul>
<li><code>:any</code> (default).</li>
<li><code>:binary</code>.</li>
<li><code>:integer</code>.</li>
<li><code>:float</code>.</li>
<li><code>:boolean</code>.</li>
<li><code>:atom</code>.</li>
<li><code>:module</code>: for modules loaded in the system.</li>
<li><code>:unsafe_module</code>: for modules that might or might not be loaded in the system.</li>
<li><code>Skogsra.Type</code> implementation: a <code>behaviour</code> for defining custom types.</li>
</ul>

<h2 id="defining-custom-types">Defining custom types</h2>

<p>Let&#39;s say we need to read an OS environment variable called <code>HISTOGRAM_BUCKETS</code> as a list of integers:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">export </span><span class="nv">HISTOGRAM_BUCKETS</span><span class="o">=</span><span class="s2">"1, 10, 30, 60"</span>
</code></pre></div>
<p>We could then implement <code>Skogsra.Type</code> behaviour to parse the string correctly:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">Myapp</span><span class="o">.</span><span class="no">Type</span><span class="o">.</span><span class="no">IntegerList</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Skogsra</span><span class="o">.</span><span class="no">Type</span>

  <span class="nv">@impl</span> <span class="no">Skogsra</span><span class="o">.</span><span class="no">Type</span>
  <span class="k">def</span> <span class="n">cast</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>

  <span class="k">def</span> <span class="n">cast</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_binary</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="k">do</span>
    <span class="n">list</span> <span class="o">=</span>
      <span class="n">value</span>
      <span class="o">|&gt;</span> <span class="no">String</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">~r/,/</span><span class="p">)</span>
      <span class="o">|&gt;</span> <span class="no">Stream</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="no">String</span><span class="o">.</span><span class="n">trim</span><span class="o">/</span><span class="m">1</span><span class="p">)</span>
      <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="no">String</span><span class="o">.</span><span class="n">to_integer</span><span class="o">/</span><span class="m">1</span><span class="p">)</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">list</span><span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">cast</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_list</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="k">do</span>
    <span class="k">if</span> <span class="no">Enum</span><span class="o">.</span><span class="n">all?</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">is_integer</span><span class="o">/</span><span class="m">1</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">value</span><span class="p">},</span> <span class="k">else</span><span class="p">:</span> <span class="ss">:error</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="n">cast</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">do</span>
    <span class="ss">:error</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>And finally use <code>Myapp.Type.IntegerList</code> in our Skogsrå configuration:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">Myapp</span><span class="o">.</span><span class="no">Config</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Skogsra</span>

  <span class="nv">@envdoc</span> <span class="sd">"</span><span class="s2">Histogram buckets"</span>
  <span class="n">app_env</span> <span class="ss">:buckets</span><span class="p">,</span> <span class="ss">:myapp</span><span class="p">,</span> <span class="ss">:histogram_buckets</span><span class="p">,</span>
    <span class="ss">type:</span> <span class="no">Myapp</span><span class="o">.</span><span class="no">Type</span><span class="o">.</span><span class="no">IntegerList</span><span class="p">,</span>
    <span class="ss">os_env:</span> <span class="sd">"</span><span class="s2">HISTOGRAM_BUCKETS"</span>
<span class="k">end</span>
</code></pre></div>
<p>Then it should be easy to retrieve our <code>buckets</code> from an OS environment variable:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="sd">"</span><span class="s2">BUCKETS"</span><span class="p">)</span>
<span class="sd">"</span><span class="s2">1, 10, 30, 60"</span>
<span class="n">iex</span><span class="p">(</span><span class="m">2</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Myapp</span><span class="o">.</span><span class="no">Config</span><span class="o">.</span><span class="n">buckets</span><span class="p">()</span>
<span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">60</span><span class="p">]}</span>
</code></pre></div>
<p>or if the variable is not defined, from our application configuration:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">System</span><span class="o">.</span><span class="n">app_env</span><span class="p">(</span><span class="ss">:myapp</span><span class="p">,</span> <span class="ss">:histogram_buckets</span><span class="p">)</span>
<span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">60</span><span class="p">]</span>
<span class="n">iex</span><span class="p">(</span><span class="m">2</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Myapp</span><span class="o">.</span><span class="no">Config</span><span class="o">.</span><span class="n">buckets</span><span class="p">()</span>
<span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">60</span><span class="p">]}</span>
</code></pre></div>
<h2 id="required-variables">Required variables</h2>

<p>Skogsrå provides an option for making configuration variables mandatory. This is useful when there is no default value for our variable and Skogsrå it&#39;s expected to find a value in either an OS environment variable or the application configuration e.g. given the following config module:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Config</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Skogsra</span>

  <span class="nv">@envdoc</span> <span class="sd">"</span><span class="s2">Server port."</span>
  <span class="n">app_env</span> <span class="ss">:port</span><span class="p">,</span> <span class="ss">:myapp</span><span class="p">,</span> <span class="ss">:port</span><span class="p">,</span>
    <span class="ss">os_env:</span> <span class="sd">"</span><span class="s2">PORT"</span><span class="p">,</span>
    <span class="ss">required:</span> <span class="no">true</span>
<span class="k">end</span>
</code></pre></div>
<p>The function <code>Myapp.Config.port()</code> will error if <code>PORT</code> is undefined and
the application configuration is not found:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="sd">"</span><span class="s2">PORT"</span><span class="p">)</span>
<span class="no">nil</span>
<span class="n">iex</span><span class="p">(</span><span class="m">2</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Application</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="ss">:myapp</span><span class="p">,</span> <span class="ss">:port</span><span class="p">)</span>
<span class="no">nil</span>
<span class="n">iex</span><span class="p">(</span><span class="m">3</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Config</span><span class="o">.</span><span class="n">port</span><span class="p">()</span>
<span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="sd">"</span><span class="s2">Variable port in app myapp is undefined"</span><span class="p">}</span>
</code></pre></div>
<h2 id="strong-typing">Strong typing</h2>

<p>All the configuration variables will have the correct function <code>@spec</code> definition e.g. given the following definition:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">Myapp</span><span class="o">.</span><span class="no">Config</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Skogsra</span>

  <span class="nv">@envdoc</span> <span class="sd">"</span><span class="s2">PostgreSQL hostname"</span>
  <span class="n">app_env</span> <span class="ss">:db_port</span><span class="p">,</span> <span class="ss">:myapp</span><span class="p">,</span> <span class="p">[</span><span class="ss">:postgres</span><span class="p">,</span> <span class="ss">:port</span><span class="p">],</span>
    <span class="ss">default:</span> <span class="m">5432</span>
<span class="k">end</span>
</code></pre></div>
<p>The generated function <code>Myapp.Config.db_port/0</code> will have the following <code>@spec</code>:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="nv">@spec</span> <span class="n">db_port</span><span class="p">()</span> <span class="p">::</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">integer</span><span class="p">()}</span> <span class="o">|</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="n">binary</span><span class="p">()}</span>
</code></pre></div>
<p>The type is derived from:</p>

<ul>
<li>The <code>default</code> value (in this case the integer <code>5432</code>)</li>
<li>The <code>type</code> configuration value (see the previous <a href="#explicit-type-casting">Explicit type casting</a> section).</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p><a href="https://hexdocs.pm/skogsra/readme.html">Skogsra</a> provides a simple way to handle your Elixir application configurations in a type-safe and organized way. Big projects can certainly benefit from using it.</p>

<p>Hope you found this article useful. Happy coding!</p>

<p><img src="https://media.giphy.com/media/PiQejEf31116URju4V/giphy.gif" alt="coding"></p>
<!--kg-card-end: markdown-->]]>
          </content:encoded>
        </item>
        <item>
          <title>Yggdrasil: Easy Pub-Sub in Elixir</title>
          <description>An overview of Yggdrasil's capabilities.</description>
          <guid>https://thebroken.link/yggdrasil-easy-pub-sub-in-elixir/</guid>
          <dc:creator>Alex de Sousa</dc:creator>
          <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
          <link>https://thebroken.link/yggdrasil-easy-pub-sub-in-elixir/</link>
          <content:encoded>
            <![CDATA[<!--kg-card-begin: markdown--><p>When I started coding in Elixir (around 2016), I was working for a financial company. Our product automatically invested money in the Forex market by copying traders&#39; actions (<em>market orders</em>) in real time. We had the following:</p>

<p>
  <figure class="flex flex-col items-center w-full h-auto mx-auto">
    <img src="/yggdrasil-easy-pub-sub-in-elixir/system.png" alt="Our System" />
    <figcaption class="text-center">
      <p>Our System</p>

    </figcaption>
  </figure>
</p>

<p>In words, our system:</p>

<ol>
<li><strong>Subscribed</strong> to PostgreSQL for receiving <em>trader actions</em>.</li>
<li><strong>Published</strong> to RabbitMQ for:

<ul>
<li>Categorizing <em>trader actions</em>.</li>
<li>And enqueuing <em>trader actions</em> in the proper queue.</li>
</ul></li>
<li><strong>Subscribed</strong> to Redis for receiving updates on prices.</li>
<li><strong>Subscribed</strong> to several RabbitMQ queues for:

<ul>
<li>Receiving the categorized <em>trader actions</em>.</li>
<li>And deciding whether it should open/close some <em>market orders</em> or not.</li>
</ul></li>
<li>Opened and closed <em>market orders</em>.</li>
</ol>

<p>We needed to be able to communicate with three systems (PostgreSQL, RabbitMQ and Redis). However, in general, we only needed three actions:</p>

<ul>
<li><code>subscribe/1</code> to a channel.</li>
<li><code>publish/2</code> a message in a channel.</li>
<li><code>unsubscribe/1</code> from a channel.</li>
</ul>

<p>If we could generalize those three actions into an API, we could then implement three individual adapters for every system to handle the annoying stuff like disconnections, failures, resource management, protocols, etc.</p>

<p><img src="https://media.giphy.com/media/aih5IZkussTiE/giphy.gif" alt="hard"></p>

<h2 id="table-of-contents">Table of Contents</h2>

<ul>
<li><p><a href="#0">Chapter I: Meet Yggdrasil</a></p></li>
<li><p><a href="#1">Chapter II: Yggdrasil and PostgreSQL Notifications</a></p></li>
<li><p><a href="#2">Chapter III: Yggdrasil and RabbitMQ Subscriptions</a></p></li>
<li><p><a href="#3">Chapter IV: Yggdrasil as Distributed PubSub</a></p></li>
<li><p><a href="#4">In the end: One API to Rule Them All</a></p></li>
</ul>

<div class="chapter">
    <h2 id="0">
      Chapter I: Meet Yggdrasil
    </h2>
    <img class="w-48 md:w-64 h-auto"
         style="filter: invert(100%);"
         src="chapter.png"
         alt="Chapter I: Meet Yggdrasil"/>
  </div>

<p>Handling subscriptions should be easy and, in an ideal world, we would only need to know <em>where</em> to connect and <em>start receiving</em> messages right away.</p>

<p>We shouldn&#39;t need to worry about secondary (yet relevant) things like disconnections, failures and managing resources.</p>

<p><img src="https://raw.githubusercontent.com/gmtprime/yggdrasil/master/priv/static/yggdrasil.png" alt="Yggdrasil"></p>

<blockquote>
<p><em>Yggdrasil</em> is an immense mythical tree that connects the nine worlds in Norse cosmology.</p>
</blockquote>

<p><a href="https://github.com/gmtprime/yggdrasil">Yggdrasil</a> was our pub-sub generalization. Using the strong foundations of Phoenix pub-sub library, we built an agnostic publisher/subscriber application that has:</p>

<ul>
<li>Multi node support.</li>
<li>Simple API: <code>subscribe/1</code>, <code>unsubscribe/1</code> and <code>publish/2</code>.</li>
<li>A <code>GenServer</code> wrapper for handling subscriber events easily.</li>
<li>A basic adapter for using Elixir message distribution.</li>
<li>Fault-tolerant adapters for:

<ul>
<li><a href="https://github.com/gmtprime/yggdrasil_redis">Redis</a>.</li>
<li><a href="https://github.com/gmtprime/yggdrasil_postgres">PostgreSQL</a>.</li>
<li><a href="https://github.com/gmtprime/yggdrasil_rabbitmq">RabbitMQ</a>.</li>
</ul></li>
</ul>

<h3 id="one-api-to-rule-them-all">One API to rule them all</h3>

<p>Yggdrasil&#39;s API is very simple:</p>

<ul>
<li>A process subscribes to <code>&quot;my_channel&quot;</code>:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="n">iex</span><span class="o">&gt;</span> <span class="ss">:ok</span> <span class="o">=</span> <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">my_channel"</span><span class="p">)</span>
   <span class="n">iex</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
   <span class="p">{</span><span class="ss">:Y_CONNECTED</span><span class="p">,</span> <span class="p">%</span><span class="no">Yggdrasil</span><span class="o">.</span><span class="no">Channel</span><span class="p">{</span><span class="o">...</span><span class="p">}}</span>
</code></pre></div>
<ul>
<li>A process (in this case the same process) publishes the message <code>&quot;my message&quot;</code> in <code>&quot;my_channel&quot;</code>.</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="n">iex</span><span class="o">&gt;</span> <span class="ss">:ok</span> <span class="o">=</span> <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">publish</span><span class="p">([</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">my_channel"</span><span class="p">],</span> <span class="sd">"</span><span class="s2">my message"</span><span class="p">)</span>
</code></pre></div>
<ul>
<li>The message should be in the mailbox of the subscriber process:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="n">iex</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
   <span class="p">{</span><span class="ss">:Y_EVENT</span><span class="p">,</span> <span class="p">%</span><span class="no">Yggdrasil</span><span class="o">.</span><span class="no">Channel</span><span class="p">{</span><span class="o">...</span><span class="p">},</span> <span class="sd">"</span><span class="s2">my message"</span><span class="p">}</span>
</code></pre></div>
<ul>
<li>The subscriber can unsubscribe from the channel to stop receiving messages:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="n">iex</span><span class="o">&gt;</span> <span class="ss">:ok</span> <span class="o">=</span> <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">unsubscribe</span><span class="p">(</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">my_channel"</span><span class="p">)</span>
   <span class="n">iex</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
   <span class="p">{</span><span class="ss">:Y_DISCONNECTED</span><span class="p">,</span> <span class="p">%</span><span class="no">Yggdrasil</span><span class="o">.</span><span class="no">Channel</span><span class="p">{</span><span class="o">...</span><span class="p">}}</span>
</code></pre></div>
<blockquote>
<p><code>flush()</code> cleans the IEx process mailbox. In general, receiving Yggdrasil messages should be the same as receiving messages when the sender uses <code>send/2</code>.</p>
</blockquote>

<p><img src="https://media.giphy.com/media/cdGQHR4Qzefx6/giphy.gif" alt="So easy!"></p>

<h3 id="yggdrasil-behaviour">Yggdrasil behaviour</h3>

<p>Yggdrasil provides a <code>behaviour</code> for writing subscribers easily. Following the previous example, the subscriber could be written as follows:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">Subscriber</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Yggdrasil</span>

  <span class="k">def</span> <span class="n">start_link</span> <span class="k">do</span>
    <span class="n">channel</span> <span class="o">=</span> <span class="p">[</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">my_channel"</span><span class="p">]</span>
    <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="p">[</span><span class="n">channel</span><span class="p">])</span>
  <span class="k">end</span>

  <span class="nv">@impl</span> <span class="no">true</span>
  <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="n">_channel</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">_state</span><span class="p">)</span> <span class="k">do</span>
    <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="p">{</span><span class="ss">:mailbox</span><span class="p">,</span> <span class="n">message</span><span class="p">}</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="no">nil</span><span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This subscriber will print the message as it receives it:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">_pid</span><span class="p">}</span> <span class="o">=</span> <span class="no">Subscriber</span><span class="o">.</span><span class="n">start_link</span><span class="p">()</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="ss">:ok</span> <span class="o">=</span> <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">publish</span><span class="p">([</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">my_channel"</span><span class="p">],</span> <span class="sd">"</span><span class="s2">my message"</span><span class="p">)</span>
<span class="p">{</span><span class="ss">:mailbox</span><span class="p">,</span> <span class="sd">"</span><span class="s2">my_message"</span><span class="p">}</span>
</code></pre></div>
<blockquote>
<p>An interesting side-effect is that now we can send messages to any process as long as they are subscribed to the right channel without needing to know the process PID or name.</p>
</blockquote>

<div class="chapter">
    <h2 id="1">
      Chapter II: Yggdrasil and PostgreSQL Notifications
    </h2>
    <img class="w-48 md:w-64 h-auto"
         style="filter: invert(100%);"
         src="chapter.png"
         alt="Chapter II: Yggdrasil and PostgreSQL Notifications"/>
  </div>

<p>One thing I really like about PostgreSQL is its notifications via <code>pg_notify</code>. This feature is very useful when trying to get real-time notifications for certain changes in a databases.</p>

<h3 id="postgresql-notifications">PostgreSQL notifications</h3>

<p>Creating notifications in PostgreSQL is very easy e.g. let&#39;s say we have a table for books:</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="c1">-- User table creation</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">books</span> <span class="p">(</span>
  <span class="n">id</span> <span class="n">SERIAL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
  <span class="n">title</span> <span class="n">TEXT</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">UNIQUE</span>
<span class="p">);</span>
</code></pre></div>
<p>and we want JSON notifications in the channel <code>new_books</code> every time a new book is created in our database e.g:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
  </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
  </span><span class="s2">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Animal Farm"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>The trigger could be implemented as follows:</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="c1">-- Trigger function creation</span>
<span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">trigger_new_book</span><span class="p">()</span>
  <span class="k">RETURNS</span> <span class="k">TRIGGER</span> <span class="k">AS</span> <span class="err">$$</span>
  <span class="k">DECLARE</span>
    <span class="n">payload</span> <span class="n">JSON</span><span class="p">;</span>
  <span class="k">BEGIN</span>
    <span class="n">payload</span> <span class="p">:</span><span class="o">=</span> <span class="n">json_build_object</span><span class="p">(</span>
      <span class="s1">'id'</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="n">id</span><span class="p">,</span>
      <span class="s1">'title'</span><span class="p">,</span> <span class="k">NEW</span><span class="p">.</span><span class="n">title</span>
    <span class="p">);</span>

    <span class="n">PERFORM</span> <span class="n">pg_notify</span><span class="p">(</span><span class="s1">'new_books'</span><span class="p">,</span> <span class="n">payload</span><span class="p">::</span><span class="n">TEXT</span><span class="p">);</span>
    <span class="k">RETURN</span> <span class="k">NEW</span><span class="p">;</span>
  <span class="k">END</span><span class="p">;</span>
  <span class="err">$$</span> <span class="k">LANGUAGE</span> <span class="n">plpgsql</span><span class="p">;</span>

<span class="c1">-- Sets the trigger function in 'books' table</span>
<span class="k">CREATE</span> <span class="k">TRIGGER</span> <span class="n">books_notify_new_book</span>
  <span class="k">BEFORE</span> <span class="k">INSERT</span> <span class="k">ON</span> <span class="n">books</span>
  <span class="k">FOR</span> <span class="k">EACH</span> <span class="k">ROW</span>
  <span class="k">EXECUTE</span> <span class="k">PROCEDURE</span> <span class="n">trigger_new_book</span><span class="p">();</span>
</code></pre></div>
<p>Then, the following query would trigger our JSON message in the channel <code>new_books</code>:</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">books</span> <span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">'Animal Farm'</span><span class="p">);</span>
</code></pre></div>
<h3 id="the-problem">The Problem</h3>

<p>Though subscribing to our database notifications can be done easily with <a href="https://github.com/elixir-ecto/postgrex">Postgrex</a> library, handling the connections to the database is a bit of a hassle. We need to ensure:</p>

<ul>
<li><strong>Connection multiplexing</strong>: avoiding over consuming database resources.</li>
<li><strong>Fault-tolerant connections</strong>: supporting re-connections in case of failure or disconnection.</li>
<li><strong>Re-connection back-off time</strong>: avoiding overloading the database on multiple re-connections.</li>
</ul>

<p><img src="https://media.giphy.com/media/FrLKYbLI0djKU/giphy.gif" alt="problem"></p>

<h3 id="the-solution">The Solution</h3>

<p><a href="https://github.com/gmtprime/yggdrasil_postgres">Yggdrasil for PostgreSQL</a> is an adapter that supports all the features mentioned above while maintaining Yggdrasil&#39;s simple API e.g:</p>

<p>For our example, we could subscribe to the database messages by doing the following:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">new_books"</span><span class="p">,</span> <span class="ss">adapter:</span> <span class="ss">:postgres</span><span class="p">,</span> <span class="ss">transformer:</span> <span class="ss">:json</span><span class="p">)</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
<span class="p">{</span><span class="ss">:Y_CONNECTED</span><span class="p">,</span> <span class="p">%</span><span class="no">Yggdrasil</span><span class="o">.</span><span class="no">Channel</span><span class="p">{</span><span class="o">...</span><span class="p">}}</span>
</code></pre></div>
<p>Running the following query:</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">books</span> <span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">'1984'</span><span class="p">);</span>
</code></pre></div>
<p>We will get the following message in IEx:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
<span class="p">{</span><span class="ss">:Y_EVENT</span><span class="p">,</span> <span class="p">%</span><span class="no">Yggdrasil</span><span class="o">.</span><span class="no">Channel</span><span class="p">{</span><span class="o">...</span><span class="p">},</span> <span class="p">%{</span><span class="sd">"</span><span class="s2">id"</span> <span class="o">=&gt;</span> <span class="m">2</span><span class="p">,</span> <span class="sd">"</span><span class="s2">title"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">1984"</span><span class="p">}}</span>
</code></pre></div>
<blockquote>
<p><strong>Note</strong>: <code>Yggdrasil</code> comes with built-in message transformers. We&#39;ve used
<code>:json</code> transformer for this example in order to get a map from the JSON
data.</p>
</blockquote>

<p>Additionally, our subscriber could also be an <code>Yggdrasil</code> process e.g:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">Books</span><span class="o">.</span><span class="no">Subscriber</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Yggdrasil</span>

  <span class="k">def</span> <span class="n">start_link</span><span class="p">(</span><span class="n">options</span> <span class="p">\\</span> <span class="p">[])</span> <span class="k">do</span>
    <span class="n">channel</span> <span class="o">=</span> <span class="p">[</span>
      <span class="ss">name:</span> <span class="sd">"</span><span class="s2">new_books"</span><span class="p">,</span>
      <span class="ss">adapter:</span> <span class="ss">:postgres</span><span class="p">,</span>
      <span class="ss">transformer:</span> <span class="ss">:json</span>
    <span class="p">]</span>

    <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="p">[</span><span class="n">channel</span><span class="p">],</span> <span class="n">options</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="nv">@impl</span> <span class="no">true</span>
  <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="n">_channel</span><span class="p">,</span> <span class="p">%{</span><span class="sd">"</span><span class="s2">id"</span> <span class="o">=&gt;</span> <span class="n">id</span><span class="p">,</span> <span class="sd">"</span><span class="s2">title"</span> <span class="o">=&gt;</span> <span class="n">title</span><span class="p">},</span> <span class="n">_state</span><span class="p">)</span> <span class="k">do</span>
    <span class="o">...</span> <span class="n">handle</span> <span class="n">event</span> <span class="o">...</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="no">nil</span><span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>It&#39;s also possbible to use <code>Yggdrasil.publish/2</code> with PostgreSQL:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="o">&gt;</span> <span class="n">message</span> <span class="o">=</span> <span class="p">%{</span><span class="sd">"</span><span class="s2">id"</span> <span class="o">=&gt;</span> <span class="m">3</span><span class="p">,</span> <span class="sd">"</span><span class="s2">title"</span> <span class="o">=&gt;</span> <span class="sd">"</span><span class="s2">A Brave New World"</span><span class="p">}</span>
<span class="n">iex</span><span class="o">&gt;</span> <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">publish</span><span class="p">([</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">new_books"</span><span class="p">,</span> <span class="ss">adapter:</span> <span class="ss">:postgres</span><span class="p">,</span> <span class="ss">transformer:</span> <span class="ss">:json</span><span class="p">],</span> <span class="n">message</span><span class="p">)</span>
</code></pre></div>
<p><img src="https://media.giphy.com/media/zcCGBRQshGdt6/giphy.gif" alt="Too easy!"></p>

<div class="chapter">
    <h2 id="2">
      Chapter III: Yggdrasil and RabbitMQ Subscriptions
    </h2>
    <img class="w-48 md:w-64 h-auto"
         style="filter: invert(100%);"
         src="chapter.png"
         alt="Chapter III: Yggdrasil and RabbitMQ Subscriptions"/>
  </div>

<p>One of the features I really like about RabbitMQ is its queue routing. Its flexibility allows you to do interesting things without much of a hassle. But before I dig deep into RabbitMQ&#39;s routing capabilities, I would like to mention some concepts.</p>

<h3 id="connections-and-channels">Connections and Channels</h3>

<p>RabbitMQ uses not only <strong>connections</strong>, but virtual connections called <strong>channels</strong>. The idea of channels is to introduce multiplexing in a single connection. A small system could establish only one connection with RabbitMQ while opening a channel for every single execution thread e.g:<p>
  <figure class="flex flex-col items-center w-full h-auto mx-auto">
    <img src="/yggdrasil-easy-pub-sub-in-elixir/rabbitmq-connection.png" alt="RabbitMQ channel multiplexing" />
    <figcaption class="text-center">
      <p>A regular RabbitMQ connection</p></p>
<div class="highlight"><pre><code class="language-" data-lang="">&lt;/figcaption&gt;
</code></pre></div>
<p></figure>
</p>
The rule of thumb would be to use:</p>

<ul>
<li>One connection per application.</li>
<li>One channel per process in the application.</li>
</ul>

<blockquote>
<p><strong>Note</strong>: Once our connection starts to be overloaded, we can start adding more connections to our connection pool.</p>
</blockquote>

<p>With a normal RabbitMQ setup, we need to deal with:</p>

<ul>
<li><strong>Connection pools</strong>: avoiding over consuming resources.</li>
<li><strong>Channel cleaning</strong>: avoiding channel memory leaks when they are not closed properly.</li>
<li><strong>Fault-tolerant connections</strong>: supporting re-connections in case of failure or disconnection.</li>
<li><strong>Re-connection back-off time</strong>: avoiding overloading the database on multiple re-connections.</li>
</ul>

<h3 id="exchanges-and-queues">Exchanges and Queues</h3>

<p>An <strong>exchange</strong> is a message router. Every <strong>queue</strong> attached to it will be identified by a <strong>routing key</strong>. Typically, routing keys are words separated by dots e.g. <code>spain.barcelona.gracia</code>.</p>

<p>Additionally, routing keys support wildcards, for example: <code>spain.barcelona.*</code> will match messages with routing keys like <code>spain.barcelona.gracia</code> and <code>spain.barcelona.raval</code>.</p>

<p>It&#39;s easier to see these concepts with an image example:<p>
  <figure class="flex flex-col items-center w-full h-auto mx-auto">
    <img src="/yggdrasil-easy-pub-sub-in-elixir/rabbitmq-exchange.png" alt="RabbitMQ exchange routing" />
    <figcaption class="text-center">
      <p>A RabbitMQ exchange</p></p>
<div class="highlight"><pre><code class="language-" data-lang="">&lt;/figcaption&gt;
</code></pre></div>
<p></figure>
</p>
In the previous image:</p>

<ul>
<li><strong><strong>Publisher X</strong></strong> and <strong><strong>Publisher Y</strong></strong> are sending messages to <strong><em>Exchange logs</em></strong>.</li>
<li><strong><strong>Subscriber A</strong></strong> is subscribed to <code>logs.*</code>.</li>
<li><strong><strong>Subscriber B</strong></strong> is subscribed to <code>logs.error</code>.</li>
</ul>

<p>Then:</p>

<ul>
<li><strong><strong>Publisher X</strong></strong> message will end up in <strong><em>Queue</em></strong> <code>logs.info</code>.</li>
<li><strong><strong>Publisher Y</strong></strong> message will end up in <strong><em>Queue</em></strong> <code>logs.error</code>.</li>
<li><strong><strong>Subscriber A</strong></strong> will receive <strong><strong>Publisher X</strong></strong> and <strong><strong>Publisher Y</strong></strong>&#39;s messages.</li>
<li><strong><strong>Subscriber B</strong></strong> will receive <strong><strong>Publisher Y</strong></strong>&#39;s message.</li>
</ul>

<p><img src="https://media.giphy.com/media/3o6gDSdED1B5wjC2Gc/giphy.gif" alt="Information Overload"></p>

<h3 id="handling-subscriptions-in-yggdrasil">Handling Subscriptions in Yggdrasil</h3>

<p>Handling RabbitMQ&#39;s complexity might be intimidating. Fortunately, <a href="https://github.com/gmtprime/yggdrasil_rabbitmq">Yggdrasil for RabbitMQ</a> generalizes the complexity in order to have a simpler API.</p>

<p>The biggest difference with previous adapters is the channel name. Instead of being a string, it&#39;s a tuple with the exchange name and the routing key e.g:</p>

<p>A subscriber would connect to the exchange <code>amq.topic</code> using the routing key <code>logs.*</code> as follows:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="n">subscriber</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="ss">name:</span> <span class="p">{</span><span class="sd">"</span><span class="s2">amq.topic"</span><span class="p">,</span> <span class="sd">"</span><span class="s2">logs.*"</span><span class="p">},</span> <span class="ss">adapter:</span> <span class="ss">:rabbitmq</span><span class="p">)</span>
<span class="n">iex</span><span class="p">(</span><span class="n">subscriber</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
<span class="p">{</span><span class="ss">:Y_CONNECTED</span><span class="p">,</span> <span class="p">%</span><span class="no">Yggdrasil</span><span class="o">.</span><span class="no">Channel</span><span class="p">{</span><span class="o">...</span><span class="p">}}</span>
</code></pre></div>
<blockquote>
<p><strong>Note</strong>: The exchange must exist and its type should be <code>topic</code>. The exchange <code>amq.topic</code> is created by default in RabbitMQ.</p>
</blockquote>

<p>Then a publisher could send a message to the exchange <code>amq.topic</code> using <code>logs.info</code> as routing key:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="n">publisher</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">publish</span><span class="p">([</span><span class="ss">name:</span> <span class="p">{</span><span class="sd">"</span><span class="s2">amq.topic"</span><span class="p">,</span> <span class="sd">"</span><span class="s2">logs.info"</span><span class="p">},</span> <span class="ss">adapter:</span> <span class="ss">:rabbitmq</span><span class="p">],</span> <span class="sd">"</span><span class="s2">Some message"</span><span class="p">)</span>
<span class="ss">:ok</span>
</code></pre></div>
<p>Finally, the subscriber would receive the message:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="n">subscriber</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
<span class="p">{</span><span class="ss">:Y_EVENT</span><span class="p">,</span> <span class="p">%</span><span class="no">Yggdrasil</span><span class="o">.</span><span class="no">Channel</span><span class="p">{</span><span class="o">...</span><span class="p">},</span> <span class="sd">"</span><span class="s2">Some message"</span><span class="p">}</span>
</code></pre></div>
<p>Additionally, the subscriber can be written using the <code>Yggdrasil</code> behaviour:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="k">defmodule</span> <span class="no">Logs</span><span class="o">.</span><span class="no">Subscriber</span> <span class="k">do</span>
  <span class="kn">use</span> <span class="no">Yggdrasil</span>

  <span class="k">def</span> <span class="n">start_link</span><span class="p">(</span><span class="n">options</span> <span class="p">\\</span> <span class="p">[])</span> <span class="k">do</span>
    <span class="n">channel</span> <span class="o">=</span> <span class="p">[</span>
      <span class="ss">name:</span> <span class="p">{</span><span class="sd">"</span><span class="s2">amq.topic"</span><span class="p">,</span> <span class="sd">"</span><span class="s2">logs.*"</span><span class="p">},</span>
      <span class="ss">adapter:</span> <span class="ss">:rabbitmq</span>
    <span class="p">]</span>

    <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="p">[</span><span class="n">channel</span><span class="p">],</span> <span class="n">options</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="nv">@impl</span> <span class="no">true</span>
  <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="n">_channel</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">_state</span><span class="p">)</span> <span class="k">do</span>
    <span class="o">...</span> <span class="n">handle</span> <span class="n">event</span> <span class="o">...</span>
    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="no">nil</span><span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h3 id="lost-messages">Lost Messages</h3>

<p>Yggdrasil will acknowledge the messages as soon as they arrive to the adapter, then it will broadcast them to all the subscribers. If the adapter is alive while the subscribers are restarting/failing, some messages might be lost.</p>

<p>Though it&#39;s possible to overcome this problem with exclusive queues, this feature is not implemented yet.</p>

<p><img src="https://media.giphy.com/media/5YuhLwDgrgtRVwI7OY/giphy.gif" alt="Penguin&#39;s queueing"></p>

<div class="chapter">
    <h2 id="3">
      Chapter IV: Yggdrasil as Distributed PubSub
    </h2>
    <img class="w-48 md:w-64 h-auto"
         style="filter: invert(100%);"
         src="chapter.png"
         alt="Chapter IV: Yggdrasil as Distributed PubSub"/>
  </div>

<p>Yggdrasil&#39;s default adapter supports multi-node subscriptions out-of-the-box thanks to <a href="https://github.com/phoenixframework/phoenix_pubsub">Phoenix PubSub</a>. This distributed capabilities can be extended to any adapter compatible with Yggdrasil v5.0 without writing a single line of extra code.</p>

<p><img src="https://media.giphy.com/media/Qtpdtlk9rpb8PKK0ih/giphy.gif" alt="Spock is interested!"></p>

<h2 id="before-we-start">Before We Start</h2>

<p>I&#39;ve used <a href="https://https://github.com/alexdesousa/alexdesousa.github.io/tree/blog/examples/matrix">this example project</a>
 for the code in this article. You can skip this section safely as long as you remember the following:</p>

<ul>
<li><code>Basic</code> project has only Yggdrasil.</li>
<li><code>Rabbit</code> project has Yggdrasil for RabbitMQ.</li>
<li>A RabbitMQ server is available.</li>
<li>The host name is called <code>matrix</code>. Your machine&#39;s will be different.</li>
</ul>

<p>If you want to follow along with the examples in this article, you can download the example project using the following command:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git clone <span class="nt">--depth</span> 2 <span class="nt">-b</span> blog https://https://github.com/alexdesousa/alexdesousa.github.io examples <span class="o">&amp;&amp;</span> <span class="nb">cd </span>examples <span class="o">&amp;&amp;</span> git filter-branch <span class="nt">--prune-empty</span> <span class="nt">--subdirectory-filter</span> examples/matrix HEAD
</code></pre></div>
<p>In the folder you&#39;ll find:</p>

<ul>
<li><a href="https://https://github.com/alexdesousa/alexdesousa.github.io/tree/blog/examples/matrix/basic">Basic project</a></li>
</ul>

<p>that has a basic version of <a href="https://github.com/gmtprime/yggdrasil">Yggdrasil</a>.
- <a href="https://https://github.com/alexdesousa/alexdesousa.github.io/tree/blog/examples/matrix/rabbit">Rabbit project</a></p>

<p>that has <a href="https://github.com/gmtprime/yggdrasil_rabbitmq">Yggdrasil for RabbitMQ</a>.
- A docker compose with a RabbitMQ server:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">   <span class="nv">$ </span><span class="nb">cd </span>rabbit <span class="o">&amp;&amp;</span> docker-compose up
</code></pre></div>
<p><img src="https://media.giphy.com/media/bKnEnd65zqxfq/giphy.gif" alt="Make it so"></p>

<h2 id="basic-message-distribution">Basic Message Distribution</h2>

<p>Yggdrasil&#39;s default adapter piggybacks on Phoenix PubSub for the message delivery, inheriting its distributed capabilities e.g. let&#39;s say we have the following:</p>

<ul>
<li>The node <code>:neo@matrix</code> using <code>Basic</code> project:</li>
</ul>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">   <span class="nv">$ </span>iex <span class="nt">--sname</span> neo <span class="nt">-S</span> mix
</code></pre></div>
<ul>
<li>The node <code>:smith@matrix</code> also using <code>Basic</code> project:</li>
</ul>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">   <span class="nv">$ </span>iex <span class="nt">--sname</span> smith <span class="nt">-S</span> mix
</code></pre></div>
<ul>
<li>Both nodes are interconnected:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="n">iex</span><span class="p">(</span><span class="n">smith</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">1</span><span class="o">&gt;</span> <span class="no">Node</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="ss">:neo</span><span class="nv">@matrix</span><span class="p">)</span>
   <span class="no">true</span>
</code></pre></div>
<p>Then <code>:smith@matrix</code> can subscribe to any channel where <code>:neo@matrix</code> is publishing messages e.g:</p>

<p>In <code>:smith@matrix</code>, we subscribe to the channel <code>&quot;private&quot;</code>:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="n">smith</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">2</span><span class="o">&gt;</span> <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">private"</span><span class="p">)</span>
<span class="ss">:ok</span>
<span class="n">iex</span><span class="p">(</span><span class="n">smith</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">3</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
<span class="p">{</span><span class="ss">:Y_CONNECTED</span><span class="p">,</span> <span class="p">%</span><span class="no">Yggdrasil</span><span class="o">.</span><span class="no">Channel</span><span class="p">{</span><span class="o">...</span><span class="p">}}</span>
<span class="ss">:ok</span>
</code></pre></div>
<p>In <code>:neo@matrix</code>, we publish a message in the channel <code>&quot;private&quot;</code>:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="n">neo</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">1</span><span class="o">&gt;</span> <span class="n">channel</span> <span class="o">=</span> <span class="p">[</span><span class="ss">name:</span> <span class="sd">"</span><span class="s2">private"</span><span class="p">]</span>
<span class="n">iex</span><span class="p">(</span><span class="n">neo</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">2</span><span class="o">&gt;</span> <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="sd">"</span><span class="s2">What's the Matrix?"</span><span class="p">)</span>
<span class="ss">:ok</span>
</code></pre></div>
<p>Finally, we can flush <code>:smith@matrix</code> mailbox and find our message:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="n">smith</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">4</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
<span class="p">{</span><span class="ss">:Y_EVENT</span><span class="p">,</span> <span class="p">%</span><span class="no">Yggdrasil</span><span class="o">.</span><span class="no">Channel</span><span class="p">{</span><span class="o">...</span><span class="p">},</span> <span class="sd">"</span><span class="s2">What's the Matrix?"</span><span class="p">}</span>
<span class="ss">:ok</span>
</code></pre></div>
<p>Distributed pubsub as simple as that.</p>

<p><img src="https://media.giphy.com/media/dWy2WwcB3wvX8QA1Iu/giphy.gif" alt="Easy"></p>

<h2 id="bridged-message-distribution">Bridged Message Distribution</h2>

<p>The bridge adapter makes a <em>bridge</em> between any Yggdrasil adapter and the default adapter. This allows adapters to inherit the distributed capabilities of the default adapter e.g. let&#39;s say we have the following:</p>

<ul>
<li>The node <code>:neo@matrix</code> using <code>Basic</code> project:</li>
</ul>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">   <span class="nv">$ </span>iex <span class="nt">--sname</span> neo <span class="nt">-S</span> mix
</code></pre></div>
<ul>
<li>The node <code>:trinity@matrix</code> using <code>Rabbit</code> project:</li>
</ul>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">   <span class="nv">$ </span>iex <span class="nt">--sname</span> trinity <span class="nt">-S</span> mix
</code></pre></div>
<ul>
<li>The node <code>:trinity@matrix</code> has access to a RabbitMQ server.</li>
<li>Both nodes are interconnected:</li>
</ul>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir">   <span class="n">iex</span><span class="p">(</span><span class="n">trinity</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">1</span><span class="o">&gt;</span> <span class="no">Node</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="ss">:neo</span><span class="nv">@matrix</span><span class="p">)</span>
   <span class="no">true</span>
</code></pre></div>
<p>So our final infrastructure would look like the following:<p>
  <figure class="flex flex-col items-center w-full h-auto mx-auto">
    <img src="/yggdrasil-easy-pub-sub-in-elixir/bridge-adapter-example.png" alt="A node using a bridge adapter to connect to RabbitMQ" />
    <figcaption class="text-center">
      <p>A node using a bridge adapter to connect to RabbitMQ</p></p>
<div class="highlight"><pre><code class="language-" data-lang="">&lt;/figcaption&gt;
</code></pre></div>
<p></figure>
</p>
Now that our nodes are connected, every adapter is available to them.</p>

<p>Through <code>:trinity@matrix</code>, the node <code>:neo@matrix</code> can now subscribe to
a RabbitMQ exchange:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="n">neo</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">1</span><span class="o">&gt;</span> <span class="n">channel</span> <span class="o">=</span> <span class="p">[</span><span class="ss">name:</span> <span class="p">{</span><span class="sd">"</span><span class="s2">amq.topic"</span><span class="p">,</span> <span class="sd">"</span><span class="s2">private"</span><span class="p">},</span> <span class="ss">adapter:</span> <span class="ss">:rabbitmq</span><span class="p">]</span>
<span class="n">iex</span><span class="p">(</span><span class="n">neo</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">2</span><span class="o">&gt;</span> <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="n">channel</span><span class="p">)</span>
<span class="ss">:ok</span>
<span class="n">iex</span><span class="p">(</span><span class="n">neo</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">3</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
<span class="p">{</span><span class="ss">:Y_CONNECTED</span><span class="p">,</span> <span class="p">%</span><span class="no">Yggdrasil</span><span class="o">.</span><span class="no">Channel</span><span class="p">{</span><span class="o">...</span><span class="p">}}</span>
<span class="ss">:ok</span>
</code></pre></div>
<p>Or even publish messages:</p>
<div class="highlight"><pre><code class="language-elixir" data-lang="elixir"><span class="n">iex</span><span class="p">(</span><span class="n">neo</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">4</span><span class="o">&gt;</span> <span class="no">Yggdrasil</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span> <span class="sd">"</span><span class="s2">What's the Matrix?"</span><span class="p">)</span>
<span class="ss">:ok</span>
<span class="n">iex</span><span class="p">(</span><span class="n">neo</span><span class="nv">@matrix</span><span class="p">)</span><span class="m">3</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span>
<span class="p">{</span><span class="ss">:Y_EVENT</span><span class="p">,</span> <span class="p">%</span><span class="no">Yggdrasil</span><span class="o">.</span><span class="no">Channel</span><span class="p">{</span><span class="o">...</span><span class="p">},</span> <span class="sd">"</span><span class="s2">What's the Matrix?"</span><span class="p">}</span>
<span class="ss">:ok</span>
</code></pre></div>
<p>The good thing about this feature is that it works with any adapter that supports Yggdrasil v5.0.</p>

<p><img src="https://media.giphy.com/media/1zRd5ZNo0s6kLPifL1/giphy.gif" alt="The future is now!"></p>

<div class="chapter">
    <h2 id="4">
      In the end: One API to Rule Them All
    </h2>
    <img class="w-48 md:w-64 h-auto"
         style="filter: invert(100%);"
         src="chapter.png"
         alt="In the end: One API to Rule Them All"/>
  </div>

<p><a href="https://github.com/gmtprime/yggdrasil">Yggdrasil</a> hides the complexity of a pub/sub and let&#39;s you focus in what really matters: <strong>messages</strong>.</p>

<p>Hope you found this article useful. Happy coding!</p>

<p><img src="https://media.giphy.com/media/26xBENWdka2DSvvag/giphy.gif" alt="Heck yeah!"></p>
<!--kg-card-end: markdown-->]]>
          </content:encoded>
        </item>
        <item>
          <title>Syntax highlighting in Jekyll</title>
          <description>Using Redcarpet markdown renderer to add pygments to Jekyll</description>
          <guid>https://thebroken.link/syntax-highlighting-in-jekyll/</guid>
          <dc:creator>Alex de Sousa</dc:creator>
          <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
          <link>https://thebroken.link/syntax-highlighting-in-jekyll/</link>
          <content:encoded>
            <![CDATA[<!--kg-card-begin: markdown--><p>This is mainly a programming blog. Big part of picking a static site generator
involved researching for code syntax highlighters. When I found these
<a href="http://jwarby.github.io/jekyll-pygments-themes/languages/javascript.html">Pygments CSS themes</a>
I knew I wanted Pygments support in my static site generator.</p>

<p>Turns out Jekyll has amazing support for Pygments when used together with
Redcarpet markdown parser.</p>

<h2 id="enter-redcarpet">Enter Redcarpet</h2>

<p>Before using any of those CSS themes, first I needed to add <code>redcarpet</code> gem
to my <code>Gemfile</code> e.g:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">source</span> <span class="s2">"https://rubygems.org"</span>

<span class="n">gem</span> <span class="s2">"jekyll"</span>
<span class="n">gem</span> <span class="s2">"redcarpet"</span>
</code></pre></div>
<p>After running <code>bundle install</code>, I added the configuration for <code>redcarpet</code> in
your <code>_config.yml</code></p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="c1"># _config.yml</span>
<span class="na">markdown</span><span class="pi">:</span> <span class="s">redcarpet</span>

<span class="nn">...</span> <span class="s">rest of the config ...</span>
</code></pre></div>
<blockquote>
<p>Redcarpet has many useful extensions and you can find out more about them
<a href="https://github.com/vmg/redcarpet">here</a>.</p>
</blockquote>

<h2 id="adding-syntax-highlighting-theme-to-jekyll">Adding syntax highlighting theme to Jekyll</h2>

<p>For <a href="https://thebroken.link">thebroken.link</a> I downloaded the
<a href="https://raw.githubusercontent.com/jwarby/pygments-css/master/monokai.css">Monokai theme</a>
for syntax highlighting.</p>

<p>I only needed to modify two files:</p>

<ul>
<li><code>assets/css/main.css</code>: my main CSS file included in all my layouts, including
<code>default</code>.</li>
<li><code>_includes/css/pygments/monokai.css</code>: Monokai theme I downloaded.</li>
</ul>

<p>In order to include Monokai theme into into <code>assets/css/main.css</code>, I used
Liquid  directives:</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">---</span>
<span class="nt">---</span>
<span class="p">{</span><span class="err">%-</span> <span class="err">comment</span> <span class="err">-%</span><span class="p">}</span> <span class="nt">File</span><span class="o">:</span> <span class="nt">assets</span><span class="o">/</span><span class="nt">css</span><span class="o">/</span><span class="nt">main</span><span class="nc">.css</span> <span class="p">{</span><span class="err">%-</span> <span class="err">endcomment</span> <span class="err">-%</span><span class="p">}</span>

<span class="p">{</span><span class="err">%-</span> <span class="err">include</span> <span class="err">css/pygments/monokai.css</span> <span class="err">-%</span><span class="p">}</span>

<span class="o">...</span> <span class="nt">more</span> <span class="nt">styles</span> <span class="o">...</span>

</code></pre></div>
<p>Having already included the file <code>assets/css/main.css</code> in my <code>default</code> layout,
I can do the following:</p>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown"><span class="nn">---</span>
<span class="s">layout:default</span>
<span class="nn">---</span>

<span class="gh"># Lorem Ipsum</span>

<span class="p">```</span><span class="nl">elixir</span>
<span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="sd">"</span><span class="s2">Lorem Ipsum"</span>
<span class="p">```</span></code></pre></figure>

<h2 id="conclusion">Conclusion</h2>

<p>Now you can have beautiful code in your programming posts!</p>

<p><img src="https://media.giphy.com/media/i5wNCqyMzY2Oc/giphy.gif" alt="B-e-a-utiful!"></p>
<!--kg-card-end: markdown-->]]>
          </content:encoded>
        </item></channel></rss>
